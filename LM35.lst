CCS PCM C Compiler, Version 4.074, 22034               14-Apr-22 23:48

               Filename: LM35.lst

               ROM used: 2218 words (27%)
                         Largest free fragment is 2048
               RAM used: 17 (5%) at main() level
                         41 (11%) worst case
               Stack:    6 locations

*
0000:  MOVLW  08
0001:  MOVWF  0A
0002:  GOTO   000
0003:  NOP
.................... //#include "D:\Proteus 8.8\pic16f887\test\LM35.h" 
....................  
.................... //LCD module connections 
.................... #define LCD_RS_PIN PIN_D0 
.................... #define LCD_RW_PIN PIN_D1 
.................... #define LCD_ENABLE_PIN PIN_D2 
.................... #define LCD_DATA4 PIN_D4 
.................... #define LCD_DATA5 PIN_D5 
.................... #define LCD_DATA6 PIN_D6 
.................... #define LCD_DATA7 PIN_D7 
....................  
.................... #define LOA PIN_C6 
.................... //End LCD module connections 
....................   
.................... #include <16F887.h> 
.................... //////// Standard Header file for the PIC16F887 device //////////////// 
.................... #device PIC16F887 
.................... #list 
....................  
.................... #fuses NOMCLR NOBROWNOUT NOLVP INTRC_IO 
.................... #device ADC = 10 
.................... #use delay(clock = 8MHz) 
.................... #include <lcd.h> 
.................... #define _lcd_h_ 
.................... #include <math.h> 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... ////        (C) Copyright 1996,2008 Custom Computer Services            //// 
.................... //// This source code may only be used by licensed users of the CCS C   //// 
.................... //// compiler.  This source code may only be distributed to other       //// 
.................... //// licensed users of the CCS C compiler.  No other use, reproduction  //// 
.................... //// or distribution is permitted without written permission.           //// 
.................... //// Derivative programs created using this software in object code     //// 
.................... //// form are not restricted in any way.                                //// 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... ////                                                                    //// 
.................... //// History:                                                           //// 
.................... ////  * 9/20/2001 :  Improvments are made to sin/cos code.              //// 
.................... ////                 The code now is small, much faster,                //// 
.................... ////                 and more accurate.                                 //// 
.................... ////  * 2/21/2007 :  Compiler handles & operator differently and does 
.................... ////                 not return generic (int8 *) so type cast is done   //// 
.................... ////                                                                    //// 
.................... //////////////////////////////////////////////////////////////////////////// 
....................  
.................... #ifndef MATH_H 
.................... #define MATH_H 
....................  
.................... #ifdef PI 
.................... #undef  PI 
.................... #endif 
.................... #define PI     3.1415926535897932 
....................  
....................  
.................... #define SQRT2  1.4142135623730950 
....................  
.................... //float const ps[4] = {5.9304945, 21.125224, 8.9403076, 0.29730279}; 
.................... //float const qs[4] = {1.0000000, 15.035723, 17.764134, 2.4934718}; 
....................  
.................... ///////////////////////////// Round Functions ////////////////////////////// 
....................  
.................... float32 CEIL_FLOOR(float32 x, unsigned int8 n) 
.................... { 
....................    float32 y, res; 
....................    unsigned int16 l; 
....................    int1 s; 
....................  
....................    s = 0; 
....................    y = x; 
....................  
....................    if (x < 0) 
....................    { 
....................       s = 1; 
....................       y = -y; 
....................    } 
....................  
....................    if (y <= 32768.0) 
....................   res = (float32)(unsigned int16)y; 
....................  
....................  else if (y < 10000000.0) 
....................    { 
....................   l = (unsigned int16)(y/32768.0); 
....................       y = 32768.0*(y/32768.0 - (float32)l); 
....................   res = 32768.0*(float32)l; 
....................   res += (float32)(unsigned int16)y; 
....................  } 
....................  
....................  else 
....................   res = y; 
....................  
....................  y = y - (float32)(unsigned int16)y; 
....................  
....................  if (s) 
....................   res = -res; 
....................  
....................  if (y != 0) 
....................  { 
....................   if (s == 1 && n == 0) 
....................    res -= 1.0; 
....................  
....................   if (s == 0 && n == 1) 
....................    res += 1.0; 
....................  } 
....................  if (x == 0) 
....................     res = 0; 
....................  
....................  return (res); 
.................... } 
....................  
.................... // Overloaded Functions to take care for new Data types in PCD 
.................... // Overloaded function CEIL_FLOOR() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 CEIL_FLOOR(float48 x, unsigned int8 n) 
.................... { 
....................    float48 y, res; 
....................    unsigned int16 l; 
....................    int1 s; 
....................  
....................    s = 0; 
....................    y = x; 
....................  
....................    if (x < 0) 
....................    { 
....................       s = 1; 
....................       y = -y; 
....................    } 
....................  
....................    if (y <= 32768.0) 
....................   res = (float48)(unsigned int16)y; 
....................  
....................  else if (y < 10000000.0) 
....................    { 
....................   l = (unsigned int16)(y/32768.0); 
....................       y = 32768.0*(y/32768.0 - (float48)l); 
....................   res = 32768.0*(float32)l; 
....................   res += (float48)(unsigned int16)y; 
....................  } 
....................  
....................  else 
....................   res = y; 
....................  
....................  y = y - (float48)(unsigned int16)y; 
....................  
....................  if (s) 
....................   res = -res; 
....................  
....................  if (y != 0) 
....................  { 
....................   if (s == 1 && n == 0) 
....................    res -= 1.0; 
....................  
....................   if (s == 0 && n == 1) 
....................    res += 1.0; 
....................  } 
....................  if (x == 0) 
....................     res = 0; 
....................  
....................  return (res); 
.................... } 
....................  
....................  
.................... // Overloaded function CEIL_FLOOR() for data type - Float64 
.................... float64 CEIL_FLOOR(float64 x, unsigned int8 n) 
.................... { 
....................    float64 y, res; 
....................    unsigned int16 l; 
....................    int1 s; 
....................  
....................    s = 0; 
....................    y = x; 
....................  
....................    if (x < 0) 
....................    { 
....................       s = 1; 
....................       y = -y; 
....................    } 
....................  
....................    if (y <= 32768.0) 
....................   res = (float64)(unsigned int16)y; 
....................  
....................  else if (y < 10000000.0) 
....................    { 
....................   l = (unsigned int16)(y/32768.0); 
....................       y = 32768.0*(y/32768.0 - (float64)l); 
....................   res = 32768.0*(float64)l; 
....................   res += (float64)(unsigned int16)y; 
....................  } 
....................  
....................  else 
....................   res = y; 
....................  
....................  y = y - (float64)(unsigned int16)y; 
....................  
....................  if (s) 
....................   res = -res; 
....................  
....................  if (y != 0) 
....................  { 
....................   if (s == 1 && n == 0) 
....................    res -= 1.0; 
....................  
....................   if (s == 0 && n == 1) 
....................    res += 1.0; 
....................  } 
....................  if (x == 0) 
....................     res = 0; 
....................  
....................  return (res); 
.................... } 
.................... #endif 
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float floor(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : rounds down the number x. 
.................... // Date : N/A 
.................... // 
.................... float32 floor(float32 x) 
.................... { 
....................    return CEIL_FLOOR(x, 0); 
.................... } 
.................... // Following 2 functions are overloaded functions of floor() for PCD 
.................... // Overloaded function floor() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 floor(float48 x) 
.................... { 
....................    return CEIL_FLOOR(x, 0); 
.................... } 
....................  
.................... // Overloaded function floor() for data type - Float64 
.................... float64 floor(float64 x) 
.................... { 
....................    return CEIL_FLOOR(x, 0); 
.................... } 
.................... #endif 
....................  
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float ceil(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : rounds up the number x. 
.................... // Date : N/A 
.................... // 
.................... float32 ceil(float32 x) 
.................... { 
....................    return CEIL_FLOOR(x, 1); 
.................... } 
.................... // Following 2 functions are overloaded functions of ceil() for PCD 
.................... // Overloaded function ceil() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 ceil(float48 x) 
.................... { 
....................    return CEIL_FLOOR(x, 1); 
.................... } 
....................  
.................... // Overloaded function ceil() for data type - Float64 
.................... float64 ceil(float64 x) 
.................... { 
....................    return CEIL_FLOOR(x, 1); 
.................... } 
.................... #endif 
....................  
....................  //////////////////////////////////////////////////////////////////////////// 
.................... //   float fabs(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : Computes the absolute value of floating point number x 
.................... // Returns : returns the absolute value of x 
.................... // Date : N/A 
.................... // 
.................... #define fabs abs 
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float fmod(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : Computes the floating point remainder of x/y 
.................... // Returns : returns the value of x= i*y, for some integer i such that, if y 
.................... // is non zero, the result has the same isgn of x na dmagnitude less than the 
.................... // magnitude of y. If y is zero then a domain error occurs. 
.................... // Date : N/A 
.................... // 
....................  
.................... float fmod(float32 x,float32 y) 
.................... { 
....................    float32 i; 
....................    if (y!=0.0) 
....................    { 
....................       i=(x/y < 0.0)? ceil(x/y): floor(x/y); 
....................       return(x-(i*y)); 
....................    } 
....................    else 
....................    { 
....................    #ifdef _ERRNO 
....................    { 
....................       errno=EDOM; 
....................    } 
....................    #endif 
....................    } 
.................... } 
.................... //Overloaded function for fmod() for PCD 
.................... // Overloaded function fmod() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 fmod(float48 x,float48 y) 
.................... { 
....................    float48 i; 
....................    if (y!=0.0) 
....................    { 
....................       i=(x/y < 0.0)? ceil(x/y): floor(x/y); 
....................       return(x-(i*y)); 
....................    } 
....................    else 
....................    { 
....................    #ifdef _ERRNO 
....................    { 
....................       errno=EDOM; 
....................    } 
....................    #endif 
....................    } 
.................... } 
.................... // Overloaded function fmod() for data type - Float64 
.................... float64 fmod(float64 x,float64 y) 
.................... { 
....................    float64 i; 
....................    if (y!=0.0) 
....................    { 
....................       i=(x/y < 0.0)? ceil(x/y): floor(x/y); 
....................       return(x-(i*y)); 
....................    } 
....................    else 
....................    { 
....................    #ifdef _ERRNO 
....................    { 
....................       errno=EDOM; 
....................    } 
....................    #endif 
....................    } 
.................... } 
.................... #endif 
.................... //////////////////// Exponential and logarithmic functions //////////////////// 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float exp(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : returns the value (e^x) 
.................... // Date : N/A 
.................... // 
.................... #define LN2 0.6931471805599453 
....................  
.................... float const pe[6] = {0.000207455774, 0.00127100575, 0.00965065093, 
....................                      0.0554965651,  0.240227138,  0.693147172}; 
....................  
....................  
.................... float32 exp(float32 x) 
.................... { 
....................    float32 y, res, r; 
....................    #if defined(__PCD__) 
....................    int8 data1; 
....................    #endif 
....................    signed int8 n; 
....................    int1 s; 
....................    #ifdef _ERRNO 
....................    if(x > 88.722838) 
....................    { 
....................       errno=ERANGE; 
....................       return(0); 
....................    } 
....................    #endif 
....................    n = (signed int16)(x/LN2); 
....................    s = 0; 
....................    y = x; 
....................  
....................    if (x < 0) 
....................    { 
....................       s = 1; 
....................       n = -n; 
....................       y = -y; 
....................    } 
....................  
....................    res = 0.0; 
.................... #if !defined(__PCD__) 
....................    *((unsigned int8 *)(&res)) = n + 0x7F; 
.................... #endif 
....................  
.................... #if defined(__PCD__)  // Takes care of IEEE format for PCD 
....................    data1 = n+0x7F; 
....................    if(bit_test(data1,0)) 
....................    bit_set(*(((unsigned int8 *)(&res)+2)),7); 
....................    rotate_right(&data1,1); 
....................    bit_clear(data1,7); 
....................    *(((unsigned int8 *)(&res)+3)) = data1; 
.................... #endif 
....................  
....................    y = y/LN2 - (float32)n; 
....................  
....................    r = pe[0]*y + pe[1]; 
....................    r = r*y + pe[2]; 
....................    r = r*y + pe[3]; 
....................    r = r*y + pe[4]; 
....................    r = r*y + pe[5]; 
....................  
....................    res = res*(1.0 + y*r); 
....................  
....................    if (s) 
....................       res = 1.0/res; 
....................    return(res); 
.................... } 
....................  
....................  
.................... //Overloaded function for exp() for PCD 
.................... // Overloaded function exp() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 exp(float48 x) 
.................... { 
....................    float48 y, res, r; 
....................    int8 data1; 
....................    signed int8 n; 
....................    int1 s; 
....................    #ifdef _ERRNO 
....................    if(x > 88.722838) 
....................    { 
....................       errno=ERANGE; 
....................       return(0); 
....................    } 
....................    #endif 
....................    n = (signed int16)(x/LN2); 
....................    s = 0; 
....................    y = x; 
....................  
....................    if (x < 0) 
....................    { 
....................       s = 1; 
....................       n = -n; 
....................       y = -y; 
....................    } 
....................  
....................    res = 0.0; 
....................  
....................    data1 = n+0x7F; 
....................    if(bit_test(data1,0)) 
....................    bit_set(*(((unsigned int8 *)(&res)+4)),7); 
....................    rotate_right(&data1,1); 
....................    bit_clear(data1,7); 
....................    *(((unsigned int8 *)(&res)+5)) = data1; 
....................  
....................    y = y/LN2 - (float48)n; 
....................  
....................    r = pe[0]*y + pe[1]; 
....................    r = r*y + pe[2]; 
....................    r = r*y + pe[3]; 
....................    r = r*y + pe[4]; 
....................    r = r*y + pe[5]; 
....................  
....................    res = res*(1.0 + y*r); 
....................  
....................    if (s) 
....................       res = 1.0/res; 
....................    return(res); 
.................... } 
....................  
.................... // Overloaded function exp() for data type - Float64 
.................... float64 exp(float64 x) 
.................... { 
....................    float64 y, res, r; 
....................    unsigned int16 data1, data2; 
....................    unsigned int16 *p; 
....................    signed int16 n; 
....................    int1 s; 
....................    #ifdef _ERRNO 
....................    if(x > 709.7827128) 
....................    { 
....................       errno=ERANGE; 
....................       return(0); 
....................    } 
....................    #endif 
....................    n = (signed int16)(x/LN2); 
....................    s = 0; 
....................    y = x; 
....................  
....................    if (x < 0) 
....................    { 
....................       s = 1; 
....................       n = -n; 
....................       y = -y; 
....................    } 
....................  
....................    res = 0.0; 
....................  
.................... #if !defined(__PCD__) 
....................    *((unsigned int16 *)(&res)) = n + 0x7F; 
.................... #endif 
....................    p= (((unsigned int16 *)(&res))+3); 
....................    data1 = *p; 
....................    data2 = *p;    
....................    data1 = n + 0x3FF; 
....................    data1 = data1 <<4; 
....................    if(bit_test(data2,15)) 
....................    bit_set(data1,15); 
....................    data2 = data2 & 0x000F; 
....................    data1 ^= data2; 
....................  
....................    *(((unsigned int16 *)(&res)+3)) = data1; 
....................  
....................  
....................    y = y/LN2 - (float64)n; 
....................  
....................    r = pe[0]*y + pe[1]; 
....................    r = r*y + pe[2]; 
....................    r = r*y + pe[3]; 
....................    r = r*y + pe[4]; 
....................    r = r*y + pe[5]; 
....................  
....................    res = res*(1.0 + y*r); 
....................  
....................    if (s) 
....................       res = 1.0/res; 
....................    return(res); 
.................... } 
....................  
.................... #ENDIF 
....................  
....................  
.................... /************************************************************/ 
....................  
.................... float32 const pl[4] = {0.45145214, -9.0558803, 26.940971, -19.860189}; 
.................... float32 const ql[4] = {1.0000000,  -8.1354259, 16.780517, -9.9300943}; 
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float log(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : returns the the natural log of x 
.................... // Date : N/A 
.................... // 
.................... float32 log(float32 x) 
.................... { 
....................    float32 y, res, r, y2; 
....................    #if defined(__PCD__) 
....................    unsigned int8  data1,data2; 
....................    #endif 
....................    signed n; 
....................    #ifdef _ERRNO 
....................    if(x <0) 
....................    { 
....................       errno=EDOM; 
....................    } 
....................    if(x ==0) 
....................    { 
....................       errno=ERANGE; 
....................       return(0); 
....................    } 
....................    #endif 
....................    y = x; 
....................  
....................    if (y != 1.0) 
....................    { 
.................... #if !defined(__PCD__) 
....................     *((unsigned int8 *)(&y)) = 0x7E;  
.................... #endif 
....................  
.................... #if defined(__PCD__) // Takes care of IEEE format 
....................    data2 = *(((unsigned int8 *)(&y))+3); 
....................    *(((unsigned int8 *)(&y))+3) = 0x3F; 
....................    data1 = *(((unsigned int8 *)(&y))+2); 
....................    bit_clear(data1,7); 
....................    *(((unsigned int8 *)(&y))+2) = data1; 
....................    if(bit_test(data2,7)) 
....................    bit_set(*(((unsigned int8 *)(&y))+3),7); 
.................... #endif 
....................  
....................       y = (y - 1.0)/(y + 1.0); 
....................  
....................       y2=y*y; 
....................  
....................       res = pl[0]*y2 + pl[1]; 
....................       res = res*y2 + pl[2]; 
....................       res = res*y2 + pl[3]; 
....................  
....................       r = ql[0]*y2 + ql[1]; 
....................       r = r*y2 + ql[2]; 
....................       r = r*y2 + ql[3]; 
....................  
....................       res = y*res/r; 
.................... #if !defined(__PCD__) 
....................       n = *((unsigned int8 *)(&x)) - 0x7E; 
.................... #endif 
.................... #if defined(__PCD__)  
....................     data1 = *(((unsigned int8 *)(&x)+3)); 
....................     rotate_left(&data1,1); 
....................     data2 = *(((unsigned int8 *)(&x)+2)); 
....................     if(bit_test (data2,7)) 
....................       bit_set(data1,0); 
....................     n = data1 - 0x7E; 
.................... #endif 
....................  
....................       if (n<0)  
....................          r = -(float32)-n; 
....................       else 
....................          r = (float32)n; 
....................  
....................       res += r*LN2; 
....................    } 
....................  
....................    else 
....................       res = 0.0; 
....................  
....................    return(res); 
.................... } 
....................  
.................... //Overloaded function for log() for PCD 
.................... // Overloaded function log() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 log(float48 x) 
.................... { 
....................    float48 y, res, r, y2; 
....................    unsigned int8  data1,data2; 
....................    signed n; 
....................    #ifdef _ERRNO 
....................    if(x <0) 
....................    { 
....................       errno=EDOM; 
....................    } 
....................    if(x ==0) 
....................    { 
....................       errno=ERANGE; 
....................       return(0); 
....................    } 
....................    #endif 
....................    y = x; 
....................  
....................    if (y != 1.0) 
....................    { 
....................     
....................    #if !defined(__PCD__) 
....................        *((unsigned int8 *)(&y)) = 0x7E;  
....................    #endif 
....................       data2 = *(((unsigned int8 *)(&y))+5); 
....................       *(((unsigned int8 *)(&y))+5) = 0x3F; 
....................       data1 = *(((unsigned int8 *)(&y))+4); 
....................       bit_clear(data1,7); 
....................       *(((unsigned int8 *)(&y))+4) = data1; 
....................    
....................       if(bit_test(data2,7)) 
....................          bit_set(*(((unsigned int8 *)(&y))+4),7); 
....................       y = (y - 1.0)/(y + 1.0); 
....................  
....................       y2=y*y; 
....................  
....................       res = pl[0]*y2 + pl[1]; 
....................       res = res*y2 + pl[2]; 
....................       res = res*y2 + pl[3]; 
....................  
....................       r = ql[0]*y2 + ql[1]; 
....................       r = r*y2 + ql[2]; 
....................       r = r*y2 + ql[3]; 
....................  
....................       res = y*res/r; 
....................  
....................     data1 = *(((unsigned int8 *)(&x)+5)); 
....................     rotate_left(&data1,1); 
....................     data2 = *(((unsigned int8 *)(&x)+4)); 
....................     if(bit_test (data2,7)) 
....................        bit_set(data1,0); 
....................       
....................     n = data1 - 0x7E; 
....................  
....................       if (n<0) 
....................          r = -(float48)-n; 
....................       else 
....................          r = (float48)n; 
....................  
....................       res += r*LN2; 
....................    } 
....................  
....................    else 
....................       res = 0.0; 
....................  
....................    return(res); 
.................... } 
....................  
.................... // Overloaded function log() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float32 const pl_64[4] = {0.45145214, -9.0558803, 26.940971, -19.860189}; 
.................... float32 const ql_64[4] = {1.0000000,  -8.1354259, 16.780517, -9.9300943}; 
.................... #endif 
.................... float64 log(float64 x) 
.................... { 
....................    float64 y, res, r, y2; 
....................    unsigned int16  data1,data2; 
....................    unsigned int16 *p; 
....................    signed int16 n; 
....................    #ifdef _ERRNO 
....................    if(x <0) 
....................    { 
....................       errno=EDOM; 
....................    } 
....................    if(x ==0) 
....................    { 
....................       errno=ERANGE; 
....................       return(0); 
....................    } 
....................    #endif 
....................    y = x; 
....................  
....................    if (y != 1.0) 
....................    { 
....................    #if !defined(__PCD__) 
....................        *((unsigned int8 *)(&y)) = 0x7E;  
....................    #endif 
....................       p= (((unsigned int16 *)(&y))+3); 
....................       data1 = *p; 
....................       data2 = *p; 
....................       data1 = 0x3FE; 
....................       data1 = data1 <<4; 
....................       if(bit_test (data2,15)) 
....................       bit_set(data1,15); 
....................       data2 = data2 & 0x000F; 
....................       data1 ^=data2; 
....................  
....................       *p = data1; 
....................  
....................       y = (y - 1.0)/(y + 1.0); 
....................  
....................       y2=y*y; 
....................  
....................       res = pl_64[0]*y2 + pl_64[1]; 
....................       res = res*y2 + pl_64[2]; 
....................       res = res*y2 + pl_64[3]; 
....................  
....................       r = ql_64[0]*y2 + ql_64[1]; 
....................       r = r*y2 + ql_64[2]; 
....................       r = r*y2 + ql_64[3]; 
....................  
....................       res = y*res/r; 
....................   
....................       p= (((unsigned int16 *)(&x))+3); 
....................       data1 = *p; 
....................       bit_clear(data1,15); 
....................       data1 = data1 >>4;     
....................       n = data1 - 0x3FE; 
....................  
....................  
....................       if (n<0) 
....................          r = -(float64)-n; 
....................       else 
....................          r = (float64)n; 
....................  
....................       res += r*LN2; 
....................    } 
....................  
....................    else 
....................       res = 0.0; 
....................  
....................    return(res); 
.................... } 
.................... #endif 
....................  
....................  
.................... #define LN10 2.3025850929940456 
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float log10(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : returns the the log base 10 of x 
.................... // Date : N/A 
.................... // 
.................... float32 log10(float32 x) 
.................... { 
....................    float32 r; 
....................  
....................    r = log(x); 
....................    r = r/LN10; 
....................    return(r); 
.................... } 
....................  
.................... //Overloaded functions for log10() for PCD 
.................... // Overloaded function log10() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 log10(float48 x) 
.................... { 
....................    float48 r; 
....................  
....................    r = log(x); 
....................    r = r/LN10; 
....................    return(r); 
.................... } 
....................  
.................... // Overloaded function log10() for data type - Float64 
.................... float64 log10(float64 x) 
.................... { 
....................    float64 r; 
....................  
....................    r = log(x); 
....................    r = r/LN10; 
....................    return(r); 
.................... } 
.................... #endif 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float modf(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description :breaks the argument value int integral and fractional parts, 
.................... // ach of which have the same sign as the argument.  It stores the integral part 
.................... // as a float in the object pointed to by the iptr 
.................... // Returns : returns the signed fractional part of value. 
.................... // Date : N/A 
.................... // 
....................  
.................... float32 modf(float32 value,float32 *iptr) 
.................... { 
....................    *iptr=(value < 0.0)? ceil(value): floor(value); 
....................    return(value - *iptr); 
.................... } 
.................... //Overloaded functions for modf() for PCD 
.................... // Overloaded function modf() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 modf(float48 value,float48 *iptr) 
.................... { 
....................    *iptr=(value < 0.0)? ceil(value): floor(value); 
....................    return(value - *iptr); 
.................... } 
.................... // Overloaded function modf() for data type - Float64 
.................... float64 modf(float64 value,float64 *iptr) 
.................... { 
....................    *iptr=(value < 0.0)? ceil(value): floor(value); 
....................    return(value - *iptr); 
.................... } 
.................... #endif 
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float pwr(float x,float y) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : returns the value (x^y) 
.................... // Date : N/A 
.................... // 
.................... float32 pwr(float32 x,float32 y) 
.................... { 
....................    if(x>=0) 
....................      return(  exp(y*log(x)) ); 
....................    else 
....................      return(  -exp(y*log(-x)) ); 
.................... } 
.................... //Overloaded functions for pwr() for PCD 
.................... // Overloaded function pwr() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 pwr(float48 x,float48 y) 
.................... { 
....................    if(x>=0) 
....................      return(  exp(y*log(x)) ); 
....................    else 
....................      return(  -exp(y*log(-x)) ); 
.................... } 
.................... // Overloaded function pwr() for data type - Float64 
.................... float64 pwr(float64 x,float64 y) 
.................... { 
....................    if(x>=0) 
....................      return(  exp(y*log(x)) ); 
....................    else 
....................      return(  -exp(y*log(-x)) ); 
.................... } 
.................... #endif 
....................  
.................... //////////////////// Power functions //////////////////// 
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float pow(float x,float y) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : returns the value (x^y) 
.................... // Date : N/A 
.................... // 
.................... float32 pow(float32 x,float32 y) 
.................... { 
....................    if(x>=0) 
....................      return(  exp(y*log(x)) ); 
....................    else 
....................      return(  -exp(y*log(-x)) ); 
.................... } 
.................... //Overloaded functions for pow() for PCD 
.................... // Overloaded function for pow() data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 pow(float48 x,float48 y) 
.................... { 
....................    if(x>=0) 
....................      return(  exp(y*log(x)) ); 
....................    else 
....................      return(  -exp(y*log(-x)) ); 
.................... } 
....................  
.................... // Overloaded function pow() for data type - Float64 
.................... float64 pow(float64 x,float64 y) 
.................... { 
....................    if(x>=0) 
....................      return(  exp(y*log(x)) ); 
....................    else 
....................      return(  -exp(y*log(-x)) ); 
.................... } 
.................... #endif 
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float sqrt(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : returns the square root of x 
.................... // Date : N/A 
.................... // 
.................... float32 sqrt(float32 x) 
.................... { 
....................    float32 y, res; 
....................    #if defined(__PCD__) 
....................    unsigned int16 data1,data2; 
....................    #endif 
....................    BYTE *p; 
....................  
....................    #ifdef _ERRNO 
....................    if(x < 0) 
....................    { 
....................       errno=EDOM; 
....................    } 
....................    #endif 
....................  
....................    if( x<=0.0) 
....................       return(0.0); 
....................  
....................    y=x; 
....................     
....................    #if !defined(__PCD__) 
....................     p=&y; 
....................    (*p)=(BYTE)((((unsigned int16)(*p)) + 127) >> 1); 
....................    #endif 
....................     
....................    #if defined(__PCD__) 
....................     p = (((unsigned int8 *)(&y))+3); 
....................     data1 = *(((unsigned int8 *)(&y))+3); 
....................     data2 = *(((unsigned int8 *)(&y))+2); 
....................     rotate_left(&data1,1);     
....................     if(bit_test(data2,7))     
....................     bit_set(data1,0);     
....................     data1 = ((data1+127) >>1); 
....................     bit_clear(data2,7); 
....................     if(bit_test(data1,0)) 
....................     bit_set(data2,7); 
....................     data1 = data1 >>1; 
....................     *(((unsigned int8 *)(&y))+3) = data1; 
....................     *(((unsigned int8 *)(&y))+2) = data2; 
....................      
....................   #endif 
....................  
....................    do { 
....................       res=y; 
....................       y+=(x/y); 
....................  
....................       #if !defined(__PCD__) 
....................      (*p)--; 
....................    #endif 
....................     
....................    #if defined(__PCD__) 
....................     data1 = *(((unsigned int8 *)(&y))+3); 
....................     data2 = *(((unsigned int8 *)(&y))+2); 
....................     rotate_left(&data1,1); 
....................     if(bit_test(data2,7)) 
....................     bit_set(data1,0);     
....................     data1--; 
....................     bit_clear(data2,7); 
....................     if(bit_test(data1,0)) 
....................     bit_set(data2,7); 
....................     data1 = data1 >>1; 
....................     *(((unsigned int8 *)(&y))+3) = data1; 
....................     *(((unsigned int8 *)(&y))+2) = data2; 
....................      
....................   #endif 
....................    } while(res != y); 
....................  
....................    return(res); 
.................... } 
.................... //Overloaded functions for sqrt() for PCD 
.................... // Overloaded function sqrt() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 sqrt(float48 x) 
.................... { 
....................    float48 y, res; 
....................    unsigned int16 data1,data2; 
....................    BYTE *p; 
....................  
....................    #ifdef _ERRNO 
....................    if(x < 0) 
....................    { 
....................       errno=EDOM; 
....................    } 
....................    #endif 
....................  
....................    if( x<=0.0) 
....................       return(0.0); 
....................  
....................    y=x; 
....................     
....................    #if !defined(__PCD__) 
....................     p=&y; 
....................    (*p)=(BYTE)((((unsigned int16)(*p)) + 127) >> 1); 
....................    #endif 
....................     
....................    #if defined(__PCD__) 
....................     p = (((unsigned int8 *)(&y))+5); 
....................     data1 = *(((unsigned int8 *)(&y))+5); 
....................     data2 = *(((unsigned int8 *)(&y))+4); 
....................     rotate_left(&data1,1); 
....................     if(bit_test(data2,7)) 
....................     bit_set(data1,0);     
....................     data1 = ((data1+127) >>1); 
....................     bit_clear(data2,7); 
....................     if(bit_test(data1,0)) 
....................     bit_set(data2,7); 
....................     data1 = data1 >>1; 
....................     *(((unsigned int8 *)(&y))+5) = data1; 
....................     *(((unsigned int8 *)(&y))+4) = data2; 
....................      
....................   #endif 
....................  
....................    do { 
....................       res=y; 
....................       y+=(x/y); 
....................  
....................       #if !defined(__PCD__) 
....................      (*p)--; 
....................    #endif 
....................     
....................     data1 = *(((unsigned int8 *)(&y))+5); 
....................     data2 = *(((unsigned int8 *)(&y))+4); 
....................     rotate_left(&data1,1); 
....................     if(bit_test(data2,7)) 
....................     bit_set(data1,0);     
....................     data1--; 
....................     bit_clear(data2,7); 
....................     if(bit_test(data1,0)) 
....................     bit_set(data2,7); 
....................     data1 = data1 >>1; 
....................     *(((unsigned int8 *)(&y))+5) = data1; 
....................     *(((unsigned int8 *)(&y))+4) = data2; 
....................      
....................    } while(res != y); 
....................  
....................    return(res); 
.................... } 
....................  
.................... // Overloaded function sqrt() for data type - Float64 
.................... float64 sqrt(float64 x) 
.................... { 
....................    float64 y, res; 
....................    unsigned int16 *p; 
....................    unsigned int16 temp1,temp2; 
....................  
....................    #ifdef _ERRNO 
....................    if(x < 0) 
....................    { 
....................       errno=EDOM; 
....................    } 
....................    #endif 
....................  
....................    if( x<=0.0) 
....................       return(0.0); 
....................  
....................    y=x; 
....................    p= (((unsigned int16 *)(&y))+3); 
....................    temp1 = *p; 
....................    temp2 = *p; 
....................    bit_clear(temp1,15); 
....................    temp1 = (temp1>>4)+1023; 
....................    temp1 = temp1 >> 1; 
....................    temp1 = (temp1<<4) & 0xFFF0; 
....................    if(bit_test(temp2,15)) 
....................    bit_set(temp1,15); 
....................    temp2 = temp2 & 0x000F; 
....................    temp1 ^= temp2; 
....................     
....................    (*p) = temp1; 
....................     
....................    do { 
....................       res=y; 
....................       y+=(x/y); 
....................      temp1 = *p; 
....................      temp2 = *p; 
....................      bit_clear(temp1,15); 
....................      temp1 = (temp1>>4); 
....................      temp1--; 
....................      temp1 = (temp1<<4) & 0xFFF0; 
....................      if(bit_test(temp2,15)) 
....................      bit_set(temp1,15); 
....................      temp2 = temp2 & 0x000F; 
....................      temp1 ^= temp2; 
....................      (*p) = temp1; 
....................  
....................    } while(res != y); 
....................  
....................    return(res); 
.................... } 
.................... #endif 
....................  
.................... ////////////////////////////// Trig Functions ////////////////////////////// 
.................... #ifdef PI_DIV_BY_TWO 
.................... #undef PI_DIV_BY_TWO 
.................... #endif 
.................... #define PI_DIV_BY_TWO   1.5707963267948966 
.................... #ifdef TWOBYPI 
.................... #undef TWOBYPI 
.................... #define TWOBYPI          0.6366197723675813 
.................... #endif 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float cos(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : returns the cosine value of the angle x, which is in radian 
.................... // Date : 9/20/2001 
.................... // 
.................... float32 cos(float32 x) 
.................... { 
....................    float32 y, t, t2 = 1.0; 
....................    unsigned int8 quad, i; 
....................    float32 frac; 
....................    float32 p[4] = { 
....................       -0.499999993585, 
....................        0.041666636258, 
....................       -0.0013888361399, 
....................        0.00002476016134 
....................    }; 
....................  
....................    if (x < 0) x = -x;                  // absolute value of input 
....................  
....................    quad = (unsigned int8)(x / PI_DIV_BY_TWO);    // quadrant 
....................    frac = (x / PI_DIV_BY_TWO) - quad;  // fractional part of input 
....................    quad = quad % 4;                    // quadrant (0 to 3) 
....................  
....................    if (quad == 0 || quad == 2) 
....................       t = frac * PI_DIV_BY_TWO; 
....................    else if (quad == 1) 
....................       t = (1-frac) * PI_DIV_BY_TWO; 
....................    else // should be 3 
....................       t = (frac-1) * PI_DIV_BY_TWO; 
....................  
....................    y = 0.999999999781; 
....................    t = t * t; 
....................    for (i = 0; i <= 3; i++) 
....................    { 
....................       t2 = t2 * t; 
....................       y = y + p[i] * t2; 
....................    } 
....................  
....................    if (quad == 2 || quad == 1) 
....................       y = -y;  // correct sign 
....................  
....................    return (y); 
.................... } 
....................  
....................  
.................... //Overloaded functions for cos() for PCD 
.................... // Overloaded function cos() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 cos(float48 x) 
.................... { 
....................    float48 y, t, t2 = 1.0; 
....................    unsigned int8 quad, i; 
....................    float48 frac; 
....................    float48 p[4] = { 
....................       -0.499999993585, 
....................        0.041666636258, 
....................       -0.0013888361399, 
....................        0.00002476016134 
....................    }; 
....................  
....................    if (x < 0) x = -x;                  // absolute value of input 
....................  
....................    quad = (unsigned int8)(x / PI_DIV_BY_TWO);    // quadrant 
....................    frac = (x / PI_DIV_BY_TWO) - quad;  // fractional part of input 
....................    quad = quad % 4;                    // quadrant (0 to 3) 
....................  
....................    if (quad == 0 || quad == 2) 
....................       t = frac * PI_DIV_BY_TWO; 
....................    else if (quad == 1) 
....................       t = (1-frac) * PI_DIV_BY_TWO; 
....................    else // should be 3 
....................       t = (frac-1) * PI_DIV_BY_TWO; 
....................  
....................    y = 0.999999999781; 
....................    t = t * t; 
....................    for (i = 0; i <= 3; i++) 
....................    { 
....................       t2 = t2 * t; 
....................       y = y + p[i] * t2; 
....................    } 
....................  
....................    if (quad == 2 || quad == 1) 
....................       y = -y;  // correct sign 
....................  
....................    return (y); 
.................... } 
....................  
.................... // Overloaded function cos() for data type - Float48 
.................... float64 cos(float64 x) 
.................... { 
....................    float64 y, t, t2 = 1.0; 
....................    unsigned int8 quad, i; 
....................    float64 frac; 
....................    float64 p[4] = { 
....................       -0.499999993585, 
....................        0.041666636258, 
....................       -0.0013888361399, 
....................        0.00002476016134 
....................    }; 
....................  
....................    if (x < 0) x = -x;                  // absolute value of input 
....................  
....................    quad = (unsigned int8)(x / PI_DIV_BY_TWO);    // quadrant 
....................    frac = (x / PI_DIV_BY_TWO) - quad;  // fractional part of input 
....................    quad = quad % 4;                    // quadrant (0 to 3) 
....................  
....................    if (quad == 0 || quad == 2) 
....................       t = frac * PI_DIV_BY_TWO; 
....................    else if (quad == 1) 
....................       t = (1-frac) * PI_DIV_BY_TWO; 
....................    else // should be 3 
....................       t = (frac-1) * PI_DIV_BY_TWO; 
....................  
....................    y = 0.999999999781; 
....................    t = t * t; 
....................    for (i = 0; i <= 3; i++) 
....................    { 
....................       t2 = t2 * t; 
....................       y = y + p[i] * t2; 
....................    } 
....................  
....................    if (quad == 2 || quad == 1) 
....................       y = -y;  // correct sign 
....................  
....................    return (y); 
.................... } 
....................  
.................... #endif 
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float sin(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : returns the sine value of the angle x, which is in radian 
.................... // Date : 9/20/2001 
.................... // 
.................... float32 sin(float32 x) 
.................... { 
....................    return cos(x - PI_DIV_BY_TWO); 
.................... } 
....................  
.................... //Overloaded functions for sin() for PCD 
.................... // Overloaded function sin() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 sin(float48 x) 
.................... { 
....................    return cos(x - PI_DIV_BY_TWO); 
.................... } 
....................  
.................... // Overloaded function sin() for data type - Float48 
.................... float64 sin(float64 x) 
.................... { 
....................    return cos(x - PI_DIV_BY_TWO); 
.................... } 
.................... #endif 
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float tan(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : returns the tangent value of the angle x, which is in radian 
.................... // Date : 9/20/2001 
.................... // 
.................... float32 tan(float32 x) 
.................... { 
....................    float32 c, s; 
....................  
....................    c = cos(x); 
....................    if (c == 0.0) 
....................       return (1.0e+36); 
....................  
....................    s = sin(x); 
....................    return(s/c); 
.................... } 
.................... //Overloaded functions for tan() for PCD 
.................... // Overloaded function tan() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 tan(float48 x) 
.................... { 
....................    float48 c, s; 
....................  
....................    c = cos(x); 
....................    if (c == 0.0) 
....................       return (1.0e+36); 
....................  
....................    s = sin(x); 
....................    return(s/c); 
.................... } 
....................  
.................... // Overloaded function tan() for data type - Float48 
.................... float64 tan(float64 x) 
.................... { 
....................    float64 c, s; 
....................  
....................    c = cos(x); 
....................    if (c == 0.0) 
....................       return (1.0e+36); 
....................  
....................    s = sin(x); 
....................    return(s/c); 
.................... } 
.................... #endif 
....................  
.................... float32 const pas[3] = {0.49559947, -4.6145309, 5.6036290}; 
.................... float32 const qas[3] = {1.0000000,  -5.5484666, 5.6036290}; 
....................  
.................... float32 ASIN_COS(float32 x, unsigned int8 n) 
.................... { 
....................    float32 y, res, r, y2; 
....................    int1 s; 
....................    #ifdef _ERRNO 
....................    if(x <-1 || x > 1) 
....................    { 
....................       errno=EDOM; 
....................    } 
....................    #endif 
....................    s = 0; 
....................    y = x; 
....................  
....................    if (x < 0) 
....................    { 
....................       s = 1; 
....................       y = -y; 
....................    } 
....................  
....................    if (y > 0.5) 
....................    { 
....................       y = sqrt((1.0 - y)/2.0); 
....................       n += 2; 
....................    } 
....................  
....................    y2=y*y; 
....................  
....................    res = pas[0]*y2 + pas[1]; 
....................    res = res*y2 + pas[2]; 
....................  
....................    r = qas[0]*y2 + qas[1]; 
....................    r = r*y2 + qas[2]; 
....................  
....................    res = y*res/r; 
....................  
....................    if (n & 2)     // |x| > 0.5 
....................       res = PI_DIV_BY_TWO - 2.0*res; 
....................    if (s) 
....................       res = -res; 
....................    if (n & 1)           // take arccos 
....................       res = PI_DIV_BY_TWO - res; 
....................  
....................    return(res); 
.................... } 
....................  
.................... //Overloaded functions for ASIN_COS() for PCD 
.................... // Overloaded function ASIN_COS() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 ASIN_COS(float48 x, unsigned int8 n) 
.................... { 
....................    float48 y, res, r, y2; 
....................    int1 s; 
....................    #ifdef _ERRNO 
....................    if(x <-1 || x > 1) 
....................    { 
....................       errno=EDOM; 
....................    } 
....................    #endif 
....................    s = 0; 
....................    y = x; 
....................  
....................    if (x < 0) 
....................    { 
....................       s = 1; 
....................       y = -y; 
....................    } 
....................  
....................    if (y > 0.5) 
....................    { 
....................       y = sqrt((1.0 - y)/2.0); 
....................       n += 2; 
....................    } 
....................  
....................    y2=y*y; 
....................  
....................    res = pas[0]*y2 + pas[1]; 
....................    res = res*y2 + pas[2]; 
....................  
....................    r = qas[0]*y2 + qas[1]; 
....................    r = r*y2 + qas[2]; 
....................  
....................    res = y*res/r; 
....................  
....................    if (n & 2)     // |x| > 0.5 
....................       res = PI_DIV_BY_TWO - 2.0*res; 
....................    if (s) 
....................       res = -res; 
....................    if (n & 1)           // take arccos 
....................       res = PI_DIV_BY_TWO - res; 
....................  
....................    return(res); 
.................... } 
....................  
.................... // Overloaded function ASIN_COS() for data type - Float64 
.................... float64 ASIN_COS(float64 x, unsigned int8 n) 
.................... { 
....................    float64 y, res, r, y2; 
....................    int1 s; 
....................    #ifdef _ERRNO 
....................    if(x <-1 || x > 1) 
....................    { 
....................       errno=EDOM; 
....................    } 
....................    #endif 
....................    s = 0; 
....................    y = x; 
....................  
....................    if (x < 0) 
....................    { 
....................       s = 1; 
....................       y = -y; 
....................    } 
....................  
....................    if (y > 0.5) 
....................    { 
....................       y = sqrt((1.0 - y)/2.0); 
....................       n += 2; 
....................    } 
....................  
....................    y2=y*y; 
....................  
....................    res = pas[0]*y2 + pas[1]; 
....................    res = res*y2 + pas[2]; 
....................  
....................    r = qas[0]*y2 + qas[1]; 
....................    r = r*y2 + qas[2]; 
....................  
....................    res = y*res/r; 
....................  
....................    if (n & 2)     // |x| > 0.5 
....................       res = PI_DIV_BY_TWO - 2.0*res; 
....................    if (s) 
....................       res = -res; 
....................    if (n & 1)           // take arccos 
....................       res = PI_DIV_BY_TWO - res; 
....................  
....................    return(res); 
.................... } 
.................... #endif 
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float asin(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : returns the arcsine value of the value x. 
.................... // Date : N/A 
.................... // 
.................... float32 asin(float32 x) 
.................... { 
....................    float32 r; 
....................  
....................    r = ASIN_COS(x, 0); 
....................    return(r); 
.................... } 
.................... //Overloaded functions for asin() for PCD 
.................... // Overloaded function asin() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 asin(float48 x) 
.................... { 
....................    float48 r; 
....................  
....................    r = ASIN_COS(x, 0); 
....................    return(r); 
.................... } 
....................  
.................... // Overloaded function asin() for data type - Float64 
.................... float64 asin(float64 x) 
.................... { 
....................    float64 r; 
....................  
....................    r = ASIN_COS(x, 0); 
....................    return(r); 
.................... } 
.................... #endif 
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float acos(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : returns the arccosine value of the value x. 
.................... // Date : N/A 
.................... // 
.................... float32 acos(float32 x) 
.................... { 
....................    float32 r; 
....................  
....................    r = ASIN_COS(x, 1); 
....................    return(r); 
.................... } 
.................... //Overloaded functions for acos() for PCD 
.................... // Overloaded function acos() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 acos(float48 x) 
.................... { 
....................    float48 r; 
....................  
....................    r = ASIN_COS(x, 1); 
....................    return(r); 
.................... } 
....................  
.................... // Overloaded function acos() for data type - Float64 
.................... float64 acos(float64 x) 
.................... { 
....................    float64 r; 
....................  
....................    r = ASIN_COS(x, 1); 
....................    return(r); 
.................... } 
.................... #endif 
....................  
.................... float32 const pat[4] = {0.17630401, 5.6710795, 22.376096, 19.818457}; 
.................... float32 const qat[4] = {1.0000000,  11.368190, 28.982246, 19.818457}; 
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float atan(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : returns the arctangent value of the value x. 
.................... // Date : N/A 
.................... // 
.................... float32 atan(float32 x) 
.................... { 
....................    float32 y, res, r; 
....................    int1 s, flag; 
....................  
....................    s = 0; 
....................    flag = 0; 
....................    y = x; 
....................  
....................    if (x < 0) 
....................    { 
....................       s = 1; 
....................       y = -y; 
....................    } 
....................  
....................    if (y > 1.0) 
....................    { 
....................       y = 1.0/y; 
....................       flag = 1; 
....................    } 
....................  
....................    res = pat[0]*y*y + pat[1]; 
....................    res = res*y*y + pat[2]; 
....................    res = res*y*y + pat[3]; 
....................  
....................    r = qat[0]*y*y + qat[1]; 
....................    r = r*y*y + qat[2]; 
....................    r = r*y*y + qat[3]; 
....................  
....................    res = y*res/r; 
....................  
....................  
....................    if (flag)                              // for |x| > 1 
....................       res = PI_DIV_BY_TWO - res; 
....................    if (s) 
....................       res = -res; 
....................  
....................    return(res); 
.................... } 
.................... //Overloaded functions for atan() for PCD 
.................... // Overloaded function atan() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 atan(float48 x) 
.................... { 
....................    float48 y, res, r; 
....................    int1 s, flag; 
....................  
....................    s = 0; 
....................    flag = 0; 
....................    y = x; 
....................  
....................    if (x < 0) 
....................    { 
....................       s = 1; 
....................       y = -y; 
....................    } 
....................  
....................    if (y > 1.0) 
....................    { 
....................       y = 1.0/y; 
....................       flag = 1; 
....................    } 
....................  
....................    res = pat[0]*y*y + pat[1]; 
....................    res = res*y*y + pat[2]; 
....................    res = res*y*y + pat[3]; 
....................  
....................    r = qat[0]*y*y + qat[1]; 
....................    r = r*y*y + qat[2]; 
....................    r = r*y*y + qat[3]; 
....................  
....................    res = y*res/r; 
....................  
....................  
....................    if (flag)                              // for |x| > 1 
....................       res = PI_DIV_BY_TWO - res; 
....................    if (s) 
....................       res = -res; 
....................  
....................    return(res); 
.................... } 
....................  
.................... // Overloaded function atan() for data type - Float64 
.................... float64 atan(float64 x) 
.................... { 
....................    float64 y, res, r; 
....................    int1 s, flag; 
....................  
....................    s = 0; 
....................    flag = 0; 
....................    y = x; 
....................  
....................    if (x < 0) 
....................    { 
....................       s = 1; 
....................       y = -y; 
....................    } 
....................  
....................    if (y > 1.0) 
....................    { 
....................       y = 1.0/y; 
....................       flag = 1; 
....................    } 
....................  
....................    res = pat[0]*y*y + pat[1]; 
....................    res = res*y*y + pat[2]; 
....................    res = res*y*y + pat[3]; 
....................  
....................    r = qat[0]*y*y + qat[1]; 
....................    r = r*y*y + qat[2]; 
....................    r = r*y*y + qat[3]; 
....................  
....................    res = y*res/r; 
....................  
....................  
....................    if (flag)                              // for |x| > 1 
....................       res = PI_DIV_BY_TWO - res; 
....................    if (s) 
....................       res = -res; 
....................  
....................    return(res); 
.................... } 
.................... #endif 
....................  
.................... ///////////////////////////////////////////////////////////////////////////// 
.................... //   float atan2(float y, float x) 
.................... ///////////////////////////////////////////////////////////////////////////// 
.................... // Description :computes the principal value of arc tangent of y/x, using the 
.................... // signs of both the arguments to determine the quadrant of the return value 
.................... // Returns : returns the arc tangent of y/x. 
.................... // Date : N/A 
.................... // 
....................  
.................... float32 atan2(float32 y,float32 x) 
.................... { 
....................    float32 z; 
....................    int1 sign; 
....................    unsigned int8 quad; 
....................    sign=0; 
....................    quad=0; //quadrant 
....................    quad=((y<=0.0)?((x<=0.0)?3:4):((x<0.0)?2:1)); 
....................    if(y<0.0) 
....................    { 
....................       sign=1; 
....................       y=-y; 
....................    } 
....................    if(x<0.0) 
....................    { 
....................       x=-x; 
....................    } 
....................    if (x==0.0) 
....................    { 
....................       if(y==0.0) 
....................       { 
....................       #ifdef _ERRNO 
....................       { 
....................          errno=EDOM; 
....................       } 
....................       #endif 
....................       } 
....................       else 
....................       { 
....................          if(sign) 
....................          { 
....................          return (-(PI_DIV_BY_TWO)); 
....................          } 
....................          else 
....................          { 
....................          return (PI_DIV_BY_TWO); 
....................          } 
....................       } 
....................    } 
....................    else 
....................    { 
....................       z=y/x; 
....................       switch(quad) 
....................       { 
....................          case 1: 
....................          { 
....................             return atan(z); 
....................             break; 
....................          } 
....................          case 2: 
....................          { 
.................... //            return (atan(z)+PI_DIV_BY_TWO);  //2L3122 
....................             return (PI-atan(z)); 
....................             break; 
....................          } 
....................          case 3: 
....................          { 
....................             return (atan(z)-PI); 
....................             break; 
....................          } 
....................          case 4: 
....................          { 
....................             return (-atan(z)); 
....................             break; 
....................          } 
....................       } 
....................    } 
.................... } 
....................  
.................... //Overloaded functions for atan2() for PCD 
.................... // Overloaded function atan2() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 atan2(float48 y,float48 x) 
.................... { 
....................    float48 z; 
....................    int1 sign; 
....................    unsigned int8 quad; 
....................    sign=0; 
....................    quad=0; //quadrant 
....................    quad=((y<=0.0)?((x<=0.0)?3:4):((x<0.0)?2:1)); 
....................    if(y<0.0) 
....................    { 
....................       sign=1; 
....................       y=-y; 
....................    } 
....................    if(x<0.0) 
....................    { 
....................       x=-x; 
....................    } 
....................    if (x==0.0) 
....................    { 
....................       if(y==0.0) 
....................       { 
....................       #ifdef _ERRNO 
....................       { 
....................          errno=EDOM; 
....................       } 
....................       #endif 
....................       } 
....................       else 
....................       { 
....................          if(sign) 
....................          { 
....................          return (-(PI_DIV_BY_TWO)); 
....................          } 
....................          else 
....................          { 
....................          return (PI_DIV_BY_TWO); 
....................          } 
....................       } 
....................    } 
....................    else 
....................    { 
....................       z=y/x; 
....................       switch(quad) 
....................       { 
....................          case 1: 
....................          { 
....................             return atan(z); 
....................             break; 
....................          } 
....................          case 2: 
....................          { 
.................... //            return (atan(z)+PI_DIV_BY_TWO);  //2L3122 
....................             return (PI-atan(z)); 
....................             break; 
....................          } 
....................          case 3: 
....................          { 
....................             return (atan(z)-PI); 
....................             break; 
....................          } 
....................          case 4: 
....................          { 
....................             return (-atan(z)); 
....................             break; 
....................          } 
....................       } 
....................    } 
.................... } 
....................  
.................... // Overloaded function atan2() for data type - Float64 
.................... float64 atan2(float64 y,float64 x) 
.................... { 
....................    float64 z; 
....................    int1 sign; 
....................    unsigned int8 quad; 
....................    sign=0; 
....................    quad=0; //quadrant 
....................    quad=((y<=0.0)?((x<=0.0)?3:4):((x<0.0)?2:1)); 
....................    if(y<0.0) 
....................    { 
....................       sign=1; 
....................       y=-y; 
....................    } 
....................    if(x<0.0) 
....................    { 
....................       x=-x; 
....................    } 
....................    if (x==0.0) 
....................    { 
....................       if(y==0.0) 
....................       { 
....................       #ifdef _ERRNO 
....................       { 
....................          errno=EDOM; 
....................       } 
....................       #endif 
....................       } 
....................       else 
....................       { 
....................          if(sign) 
....................          { 
....................          return (-(PI_DIV_BY_TWO)); 
....................          } 
....................          else 
....................          { 
....................          return (PI_DIV_BY_TWO); 
....................          } 
....................       } 
....................    } 
....................    else 
....................    { 
....................       z=y/x; 
....................       switch(quad) 
....................       { 
....................          case 1: 
....................          { 
....................             return atan(z); 
....................             break; 
....................          } 
....................          case 2: 
....................          { 
.................... //            return (atan(z)+PI_DIV_BY_TWO);  //2L3122 
....................             return (PI-atan(z)); 
....................             break; 
....................          } 
....................          case 3: 
....................          { 
....................             return (atan(z)-PI); 
....................             break; 
....................          } 
....................          case 4: 
....................          { 
....................             return (-atan(z)); 
....................             break; 
....................          } 
....................       } 
....................    } 
.................... } 
.................... #endif 
....................  
.................... //////////////////// Hyperbolic functions //////////////////// 
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float cosh(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : Computes the hyperbolic cosine value of x 
.................... // Returns : returns the hyperbolic cosine value of x 
.................... // Date : N/A 
.................... // 
....................  
.................... float32 cosh(float32 x) 
.................... { 
....................    return ((exp(x)+exp(-x))/2); 
.................... } 
.................... //Overloaded functions for cosh() for PCD 
.................... // Overloaded function cosh() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 cosh(float48 x) 
.................... { 
....................    return ((exp(x)+exp(-x))/2); 
.................... } 
....................  
.................... // Overloaded function cosh() for data type - Float64 
.................... float64 cosh(float64 x) 
.................... { 
....................    return ((exp(x)+exp(-x))/2); 
.................... } 
.................... #endif 
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float sinh(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : Computes the hyperbolic sine value of x 
.................... // Returns : returns the hyperbolic sine value of x 
.................... // Date : N/A 
.................... // 
....................  
.................... float32 sinh(float32 x) 
.................... { 
....................  
....................    return ((exp(x) - exp(-x))/2); 
.................... } 
.................... //Overloaded functions for sinh() for PCD 
.................... // Overloaded function sinh() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 sinh(float48 x) 
.................... { 
....................  
....................    return ((exp(x) - exp(-x))/2); 
.................... } 
....................  
.................... // Overloaded function sinh() for data type - Float48 
.................... float64 sinh(float64 x) 
.................... { 
....................  
....................    return ((exp(x) - exp(-x))/2); 
.................... } 
.................... #endif 
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float tanh(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : Computes the hyperbolic tangent value of x 
.................... // Returns : returns the hyperbolic tangent value of x 
.................... // Date : N/A 
.................... // 
....................  
.................... float32 tanh(float32 x) 
.................... { 
....................    return(sinh(x)/cosh(x)); 
.................... } 
.................... //Overloaded functions for tanh() for PCD 
.................... // Overloaded function tanh() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 tanh(float48 x) 
.................... { 
....................    return(sinh(x)/cosh(x)); 
.................... } 
....................  
.................... // Overloaded function tanh() for data type - Float64 
.................... float64 tanh(float64 x) 
.................... { 
....................    return(sinh(x)/cosh(x)); 
.................... } 
.................... #endif 
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float frexp(float x, signed int *exp) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : breaks a floating point number into a normalized fraction and an integral 
.................... // power of 2. It stores the integer in the signed int object pointed to by exp. 
.................... // Returns : returns the value x, such that x is a double with magnitude in the interval 
.................... // [1/2,1) or zero, and value equals x times 2 raised to the power *exp.If value is zero, 
.................... // both parts of the result are zero. 
.................... // Date : N/A 
.................... // 
....................  
.................... #define LOG2 .30102999566398119521 
.................... float32 frexp(float32 x, signed int8 *exp) 
.................... { 
....................    float32 res; 
....................    int1 sign = 0; 
....................    if(x == 0.0) 
....................    { 
....................       *exp=0; 
....................       return (0.0); 
....................    } 
....................    if(x < 0.0) 
....................    { 
....................      x=-x; 
....................      sign=1; 
....................    } 
....................    if (x > 1.0) 
....................    { 
....................       *exp=(ceil(log10(x)/LOG2)); 
....................       res=x/(pow(2, *exp)); 
....................       if (res == 1) 
....................       { 
....................          *exp=*exp+1; 
....................           res=.5; 
....................       } 
....................    } 
....................    else 
....................    { 
....................       if(x < 0.5) 
....................       { 
....................          *exp=-1; 
....................          res=x*2; 
....................       } 
....................       else 
....................       { 
....................          *exp=0; 
....................           res=x; 
....................       } 
....................    } 
....................    if(sign) 
....................    { 
....................       res=-res; 
....................    } 
....................    return res; 
.................... } 
....................  
.................... //Overloaded functions for frexp() for PCD 
.................... // Overloaded function frexp() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 frexp(float48 x, signed int8 *exp) 
.................... { 
....................    float48 res; 
....................    int1 sign = 0; 
....................    if(x == 0.0) 
....................    { 
....................       *exp=0; 
....................       return (0.0); 
....................    } 
....................    if(x < 0.0) 
....................    { 
....................      x=-x; 
....................      sign=1; 
....................    } 
....................    if (x > 1.0) 
....................    { 
....................       *exp=(ceil(log10(x)/LOG2)); 
....................       res=x/(pow(2, *exp)); 
....................       if (res == 1) 
....................       { 
....................          *exp=*exp+1; 
....................           res=.5; 
....................       } 
....................    } 
....................    else 
....................    { 
....................       if(x < 0.5) 
....................       { 
....................          *exp=-1; 
....................          res=x*2; 
....................       } 
....................       else 
....................       { 
....................          *exp=0; 
....................           res=x; 
....................       } 
....................    } 
....................    if(sign) 
....................    { 
....................       res=-res; 
....................    } 
....................    return res; 
.................... } 
....................  
.................... // Overloaded function frexp() for data type - Float64 
.................... float64 frexp(float64 x, signed int8 *exp) 
.................... { 
....................    float64 res; 
....................    int1 sign = 0; 
....................    if(x == 0.0) 
....................    { 
....................       *exp=0; 
....................       return (0.0); 
....................    } 
....................    if(x < 0.0) 
....................    { 
....................      x=-x; 
....................      sign=1; 
....................    } 
....................    if (x > 1.0) 
....................    { 
....................       *exp=(ceil(log10(x)/LOG2)); 
....................       res=x/(pow(2, *exp)); 
....................       if (res == 1) 
....................       { 
....................          *exp=*exp+1; 
....................           res=.5; 
....................       } 
....................    } 
....................    else 
....................    { 
....................       if(x < 0.5) 
....................       { 
....................          *exp=-1; 
....................          res=x*2; 
....................       } 
....................       else 
....................       { 
....................          *exp=0; 
....................           res=x; 
....................       } 
....................    } 
....................    if(sign) 
....................    { 
....................       res=-res; 
....................    } 
....................    return res; 
.................... } 
.................... #endif 
....................  
.................... ////////////////////////////////////////////////////////////////////////////// 
.................... //   float ldexp(float x, signed int *exp) 
.................... ////////////////////////////////////////////////////////////////////////////// 
.................... // Description : multiplies a floating point number by an integral power of 2. 
.................... // Returns : returns the value of x times 2 raised to the power exp. 
.................... // Date : N/A 
.................... // 
....................  
.................... float32 ldexp(float32 value, signed int8 exp) 
.................... { 
....................    return (value * pow(2,exp)); 
.................... } 
.................... //Overloaded functions for ldexp() for PCD 
.................... // Overloaded function ldexp() for data type - Float48 
....................  
.................... #if defined(__PCD__) 
.................... float48 ldexp(float48 value, signed int8 exp) 
.................... { 
....................    return (value * pow(2,exp)); 
.................... } 
.................... // Overloaded function ldexp() for data type - Float64 
.................... float64 ldexp(float64 value, signed int8 exp) 
.................... { 
....................    return (value * pow(2,exp)); 
.................... } 
.................... #endif 
....................  
.................... #endif 
....................  
.................... #use delay(clock=4000000) 
*
0066:  MOVLW  37
0067:  MOVWF  04
0068:  BCF    03.7
0069:  MOVF   00,W
006A:  BTFSC  03.2
006B:  GOTO   07A
006C:  MOVLW  01
006D:  MOVWF  78
006E:  CLRF   77
006F:  DECFSZ 77,F
0070:  GOTO   06F
0071:  DECFSZ 78,F
0072:  GOTO   06E
0073:  MOVLW  4A
0074:  MOVWF  77
0075:  DECFSZ 77,F
0076:  GOTO   075
0077:  GOTO   078
0078:  DECFSZ 00,F
0079:  GOTO   06C
007A:  RETLW  00
.................... void lcd_init(void);             // Ham dung de khoi dong C.LCD. 
.................... byte lcd_read_byte(void);         // Ham xu ly doc thong tin (dang 8 bit) tu thong tin dang 4 bit tu C.LCD. 
.................... byte lcd_read_nibble(void);         // Ham doc thong tin (dang 4 bit / nibble) tu C.LCD. 
.................... void lcd_send_byte(byte address, byte n);   // Ham gui thong tin (byte) toi C.LCD tai dia chi (address). 
.................... void lcd_send_nibble(byte n);      // Ham gui thong tin (dang 4 bit / nibble) sang C.LCD. 
.................... void lcd_gotoxy(byte x, byte y);   // Ham thiet lap vi tri ghi tren C.LCD. 
.................... char lcd_getc(byte x, byte y);      // Ham tra ve ky tu tai vi tri (x,y) tren C.LCD. 
.................... void lcd_putc(char c);            // Ham se hien thi ky tu c tai vi tri ke tiep tren C.LCD. 
.................... // Khai bao bien. 
.................... // Dinh nghia cac thong so. 
.................... //!#define LCD_RS_PIN         PIN_D1   // Cac ket noi C.LCD voi vi dieu khien. 
.................... //!#define LCD_RW_PIN         PIN_D2 
.................... //!#define LCD_ENABLE_PIN     PIN_D3 
.................... //!#define LCD_DATA4          PIN_D4 
.................... //!#define LCD_DATA5          PIN_D5 
.................... //!#define LCD_DATA6          PIN_D6 
.................... //!#define LCD_DATA7          PIN_D7  
....................  
.................... #define LCD_RS_PIN         PIN_D0   // Cac ket noi C.LCD voi vi dieu khien. 
.................... #define LCD_RW_PIN         PIN_D1 
.................... #define LCD_ENABLE_PIN     PIN_D2 
.................... #define LCD_DATA4          PIN_D4 
.................... #define LCD_DATA5          PIN_D5 
.................... #define LCD_DATA6          PIN_D6 
.................... #define LCD_DATA7          PIN_D7 
....................  
.................... /* 
.................... #define LCD_RS_PIN         PIN_D1   // Cac ket noi C.LCD voi vi dieu khien. 
.................... #define LCD_RW_PIN      PIN_D2 
.................... #define LCD_ENABLE_PIN  PIN_D3 
.................... #define LCD_DATA4       PIN_D4 
.................... #define LCD_DATA5       PIN_D5 
.................... #define LCD_DATA6       PIN_D6 
.................... #define LCD_DATA7       PIN_D7   
.................... */ 
.................... #define lcd_output_enable(x)   output_bit(LCD_ENABLE_PIN, x)   // Lenh dieu khien chan LCD_ENABLE_PIN. 
.................... #define lcd_enable_tris()   output_drive(LCD_ENABLE_PIN) 
....................  
.................... #define lcd_output_rs(x)   output_bit(LCD_RS_PIN, x)   // Lenh dieu khien chan LCD_RS_PIN. 
.................... #define lcd_rs_tris()      output_drive(LCD_RS_PIN) 
....................  
.................... #define lcd_output_rw(x)   output_bit(LCD_RW_PIN, x)   // Lenh dieu khien chan LCD_RW_PIN 
.................... #define lcd_rw_tris()      output_drive(LCD_RW_PIN) 
....................  
.................... #define lcd_line_one   0x00    // Dia chi RAM C.LCD cho hang thu 1. 
.................... #define lcd_line_two   0x40    // Dia chi RAM C.LCD cho hang thu 2. 
.................... #define lcd_line_three   0x14 
.................... #define lcd_line_four   0x54 
.................... #define LCD_TYPE 0x02           // Thong tin cau hinh C.LCD: 0x00=5x7, 0x01=5x10, 0x02=2 lines 
....................  
.................... // Dinh nghia cac hang so. 
.................... byte const LCD_INIT_STRING[4] = {0x28 | (LCD_TYPE << 2), 0x0C, 0x01, 0x06}; 
....................         // Cac byte nay can thiet de gui toi C.LCD, dung de khoi dong cau hinh hoat dong cho C.LCD. 
....................       // Byte 1: 0x20 | (LCD_TYPE << 2) - So bit du lieu giao tiep (DL), so dong hien thi (N), kieu ky tu (F). 
....................       //         0 0 1 DL N F x x (DL: Data Length, N: Number Line, F: Font). 
....................          // Truong hop 1: 0x20 - 4 bit / 1 dong / 5 x 7. 
....................          // Truong hop 2: 0x24 - 4 bit / 1 dong / 5 x 10. 
....................          // Truong hop 3: 0x28 - 4 bit / 2 dong / 5 x 7. 
....................       // Byte 2: 0x0C - Dieu khien hien thi (Bat hien thi, tat con tro, tat nhap nhay con tro). 
....................       //         0 0 0 0 1 D C B (D: Display, C: Cursor, B: Blink). 
....................       // Byte 3: 0x01 - Xoa hien thi va tra con tro ve dau dong. 
....................       // Byte 4: 0x06 - Dat che do dau vao (Che do tang dia chi, tat dich chuyen hien thi). 
....................       //         0 0 0 0 0 1 I/D S (I/D: Increment/Decrement, S: Shift). 
....................       // Byte 5: .... - Doi con tro / hien thi. 
....................       //         0 0 0 1 S/C R/L x x (S/C: Screen/Cursor, R/L: Right/Left). 
....................  
.................... // *************************************************** 
.................... void lcd_init(void)    // Ham dung de khoi dong C.LCD. 
.................... { 
.................... // Khai bao bien. 
.................... byte i; 
.................... // Dinh nghia ham. 
.................... output_drive(LCD_DATA4);   // Thiet lap chan port (Data) o che do ngo ra. 
*
012E:  BSF    03.5
012F:  BCF    08.4
.................... output_drive(LCD_DATA5); 
0130:  BCF    08.5
.................... output_drive(LCD_DATA6); 
0131:  BCF    08.6
.................... output_drive(LCD_DATA7); 
0132:  BCF    08.7
....................  
.................... lcd_enable_tris();         // Thiet lap chan port (Control: EN, RS, RW) o che do ngo ra. 
0133:  BCF    08.2
.................... lcd_rs_tris(); 
0134:  BCF    08.0
.................... lcd_rw_tris(); 
0135:  BCF    08.1
....................  
.................... lcd_output_rs(0);         // RS = 0 - Databus = Bus lenh. 
0136:  BCF    03.5
0137:  BCF    08.0
0138:  BSF    03.5
0139:  BCF    08.0
.................... lcd_output_rw(0);         // RW = 0 - Ghi thong tin vao C.LCD. 
013A:  BCF    03.5
013B:  BCF    08.1
013C:  BSF    03.5
013D:  BCF    08.1
.................... lcd_output_enable(0);      // EN = 0 - Cam truy xuat C.LCD. 
013E:  BCF    03.5
013F:  BCF    08.2
0140:  BSF    03.5
0141:  BCF    08.2
....................  
.................... delay_ms(15);   // Tao thoi gian tre 15ms (Thoi gian de LCD tu reset khi moi duoc cap nguon). 
0142:  MOVLW  0F
0143:  BCF    03.5
0144:  MOVWF  37
0145:  CALL   066
....................  
.................... for(i=1;i<=3;i++)         // Doan lenh khoi dong C.LCD o che do 8 bit duoc thuc hien 3 lan lien tiep 
0146:  MOVLW  01
0147:  MOVWF  29
0148:  MOVF   29,W
0149:  SUBLW  03
014A:  BTFSS  03.0
014B:  GOTO   154
....................    {                  // tai thoi diem ban dau (de dam bao cho C.LCD hoat dong on dinh trong  
....................    lcd_send_nibble(0x03);    // truong hop khi cung cap nguon cho C.LCD ma dien ap nguon tang len cham). 
014C:  MOVLW  03
014D:  MOVWF  3E
014E:  CALL   07B
....................    delay_ms(5);         // RS = 0, RW = 0, D7 - D4 = 0011 (0x03) -> DL = 1 (8 bit). 
014F:  MOVLW  05
0150:  MOVWF  37
0151:  CALL   066
....................    }                  // Do co BF (Busy Flag) chua kiem tra duoc trong thoi diem nay, nen phai  
0152:  INCF   29,F
0153:  GOTO   148
....................                      // thuc hien 3 lan (xem luu do khoi dong C.LCD cua nha san xuat). 
....................  
.................... lcd_send_nibble(0x02);      // Doan lenh khoi dong C.LCD o che do 4 bit. Tu luc nay thi 4 bit cao duoc ghi 
0154:  MOVLW  02
0155:  MOVWF  3E
0156:  CALL   07B
....................                      // ra truoc tien, sau do la 4 bit thap. 
....................                      // RS = 0, RW = 0, D7 - D4 = 0010 (0x02) -> DL = 0 (4 bit). 
....................                      // Co BF (Busy Flag) co the bat dau kiem tra duoc tu luc nay. 
....................  
.................... for(i=0;i<=3;i++) 
0157:  CLRF   29
0158:  MOVF   29,W
0159:  SUBLW  03
015A:  BTFSS  03.0
015B:  GOTO   165
....................    lcd_send_byte(0,LCD_INIT_STRING[i]);   // Goi ham truyen thong tin (lenh) sang C.LCD. 
015C:  MOVF   29,W
015D:  CALL   004
015E:  MOVWF  2A
015F:  CLRF   3B
0160:  MOVF   2A,W
0161:  MOVWF  3C
0162:  CALL   0D7
0163:  INCF   29,F
0164:  GOTO   158
.................... }                                 // Lenh: Thiet lap cau hinh hoat dong cho C.LCD. 
0165:  BSF    0A.3
0166:  BCF    0A.4
0167:  GOTO   041 (RETURN)
....................  
.................... // *************************************************** 
.................... byte lcd_read_byte(void)   // Ham xu ly doc thong tin (dang 8 bit) tu thong tin dang 4 bit tu C.LCD. 
.................... { 
.................... // Khai bao bien. 
.................... byte low,high; 
.................... // Dinh nghia ham. 
.................... output_float(LCD_DATA4);   // Thiet lap chan port o che do ngo vao. 
*
00DA:  BSF    08.4
.................... output_float(LCD_DATA5); 
00DB:  BSF    08.5
.................... output_float(LCD_DATA6); 
00DC:  BSF    08.6
.................... output_float(LCD_DATA7); 
00DD:  BSF    08.7
....................  
.................... lcd_output_rw(1);         // RW = 1 - Doc thong tin tu C.LCD. 
00DE:  BCF    03.5
00DF:  BSF    08.1
00E0:  BSF    03.5
00E1:  BCF    08.1
....................                   // Tien hanh doc 4 bit cao cua thong tin tu C.LCD. 
.................... delay_cycles(1);         // Tao tre 1 chu ky (t=1us voi fosc=4MHz). 
00E2:  NOP
.................... lcd_output_enable(1);      // EN = 1 - Cho phep truy xuat C.LCD. 
00E3:  BCF    03.5
00E4:  BSF    08.2
00E5:  BSF    03.5
00E6:  BCF    08.2
.................... delay_cycles(1);         // Tao tre 1 chu ky (t=1us voi fosc=4MHz). 
00E7:  NOP
.................... high = lcd_read_nibble();   // Cat tam 4 bit du lieu (4 bit cao). 
00E8:  BCF    03.5
00E9:  CALL   0A6
00EA:  MOVF   78,W
00EB:  MOVWF  3E
.................... lcd_output_enable(0);      // EN = 0 - Cam truy xuat C.LCD. 
00EC:  BCF    08.2
00ED:  BSF    03.5
00EE:  BCF    08.2
....................                   // Tien hanh doc 4 bit thap cua thong tin tu C.LCD. 
.................... delay_cycles(1);         // Tao tre 1 chu ky (t=1us voi fosc=4MHz). 
00EF:  NOP
.................... lcd_output_enable(1);      // EN = 1 - Cho phep truy xuat C.LCD. 
00F0:  BCF    03.5
00F1:  BSF    08.2
00F2:  BSF    03.5
00F3:  BCF    08.2
.................... delay_cycles(1);         // Tao tre 1 chu ky (t=1us voi fosc=4MHz). 
00F4:  NOP
.................... low = lcd_read_nibble();   // Cat tam 4 bit du lieu (4 bit thap). 
00F5:  BCF    03.5
00F6:  CALL   0A6
00F7:  MOVF   78,W
00F8:  MOVWF  3D
.................... lcd_output_enable(0);      // EN = 0 - Cam truy xuat C.LCD. 
00F9:  BCF    08.2
00FA:  BSF    03.5
00FB:  BCF    08.2
....................  
.................... output_drive(LCD_DATA4);   // Thiet lap chan port o che do ngo ra. 
00FC:  BCF    08.4
.................... output_drive(LCD_DATA5); 
00FD:  BCF    08.5
.................... output_drive(LCD_DATA6); 
00FE:  BCF    08.6
.................... output_drive(LCD_DATA7); 
00FF:  BCF    08.7
....................  
.................... return((high<<4) | low);   // Tra ve ket qua du lieu (dang 8 bit). 
0100:  BCF    03.5
0101:  SWAPF  3E,W
0102:  MOVWF  77
0103:  MOVLW  F0
0104:  ANDWF  77,F
0105:  MOVF   77,W
0106:  IORWF  3D,W
0107:  MOVWF  78
.................... } 
....................  
.................... // *************************************************** 
.................... byte lcd_read_nibble(void)   // Ham doc thong tin (dang 4 bit / nibble) tu C.LCD. 
.................... { 
.................... // Khai bao bien. 
.................... byte n = 0x00;   // Mac dinh gia tri ban dau cho noi chua se thong tin. 
*
00A6:  CLRF   3F
.................... // Dinh nghia ham. 
.................... n |= input(LCD_DATA4);         // Doc lan luot cac bit tu bus du lieu. 
00A7:  BSF    03.5
00A8:  BSF    08.4
00A9:  MOVLW  00
00AA:  BCF    03.5
00AB:  BTFSC  08.4
00AC:  MOVLW  01
00AD:  IORWF  3F,F
.................... n |= input(LCD_DATA5) << 1; 
00AE:  BSF    03.5
00AF:  BSF    08.5
00B0:  MOVLW  00
00B1:  BCF    03.5
00B2:  BTFSC  08.5
00B3:  MOVLW  01
00B4:  MOVWF  77
00B5:  BCF    03.0
00B6:  RLF    77,F
00B7:  MOVF   77,W
00B8:  IORWF  3F,F
.................... n |= input(LCD_DATA6) << 2; 
00B9:  BSF    03.5
00BA:  BSF    08.6
00BB:  MOVLW  00
00BC:  BCF    03.5
00BD:  BTFSC  08.6
00BE:  MOVLW  01
00BF:  MOVWF  77
00C0:  RLF    77,F
00C1:  RLF    77,F
00C2:  MOVLW  FC
00C3:  ANDWF  77,F
00C4:  MOVF   77,W
00C5:  IORWF  3F,F
.................... n |= input(LCD_DATA7) << 3; 
00C6:  BSF    03.5
00C7:  BSF    08.7
00C8:  MOVLW  00
00C9:  BCF    03.5
00CA:  BTFSC  08.7
00CB:  MOVLW  01
00CC:  MOVWF  77
00CD:  RLF    77,F
00CE:  RLF    77,F
00CF:  RLF    77,F
00D0:  MOVLW  F8
00D1:  ANDWF  77,F
00D2:  MOVF   77,W
00D3:  IORWF  3F,F
....................  
.................... return(n);   // Tra ve ket qua doc duoc (data = 0000 xxxx). 
00D4:  MOVF   3F,W
00D5:  MOVWF  78
.................... } 
00D6:  RETLW  00
....................  
.................... // *************************************************** 
.................... void lcd_send_byte(byte address, byte n)   // Ham gui thong tin (byte) toi C.LCD tai dia chi (address). 
.................... {                                 // address = 0: Lenh / 1: Du lieu. 
....................                                  // byte = Thong tin can gui (8 bit). 
.................... // Khai bao bien. 
....................  
.................... // Dinh nghia ham.   
.................... lcd_output_rs(0);      // RS = 0 - Databus = Bus lenh. 
00D7:  BCF    08.0
00D8:  BSF    03.5
00D9:  BCF    08.0
.................... while(bit_test(lcd_read_byte(),7));   // Cho Busy Flag = 0 (C.LCD da xu ly xong). 
*
0108:  MOVF   78,W
0109:  MOVWF  3D
010A:  BTFSS  3D.7
010B:  GOTO   10E
010C:  BSF    03.5
010D:  GOTO   0DA
.................... lcd_output_rs(address);   // RS = address - Databus = Bus lenh/du lieu. 
010E:  MOVF   3B,F
010F:  BTFSS  03.2
0110:  GOTO   113
0111:  BCF    08.0
0112:  GOTO   114
0113:  BSF    08.0
0114:  BSF    03.5
0115:  BCF    08.0
.................... delay_cycles(1);      // Tao tre 1 chu ky (t=1us voi fosc=4MHz). 
0116:  NOP
.................... lcd_output_rw(0);      // RW = 0 - Ghi thong tin vao C.LCD. 
0117:  BCF    03.5
0118:  BCF    08.1
0119:  BSF    03.5
011A:  BCF    08.1
.................... delay_cycles(1);      // Tao tre 1 chu ky (t=1us voi fosc=4MHz). 
011B:  NOP
.................... lcd_output_enable(0);   // EN = 0 - Cam truy xuat C.LCD. 
011C:  BCF    03.5
011D:  BCF    08.2
011E:  BSF    03.5
011F:  BCF    08.2
.................... lcd_send_nibble(n >> 4);   // Goi ham truyen 4 bit cao sang C.LCD. 
0120:  BCF    03.5
0121:  SWAPF  3C,W
0122:  MOVWF  3D
0123:  MOVLW  0F
0124:  ANDWF  3D,F
0125:  MOVF   3D,W
0126:  MOVWF  3E
0127:  CALL   07B
.................... lcd_send_nibble(n & 0x0F);   // Goi ham truyen 4 bit thap sang C.LCD. 
0128:  MOVF   3C,W
0129:  ANDLW  0F
012A:  MOVWF  3D
012B:  MOVWF  3E
012C:  CALL   07B
.................... } 
012D:  RETLW  00
....................  
.................... // *************************************************** 
.................... void lcd_send_nibble(byte n)   // Ham gui thong tin (dang 4 bit / nibble) sang C.LCD. 
.................... {                        // n = Thong tin can gui. 4 bit can gui phai nam vi tri 4 bit thap. 
.................... // Khai bao bien. 
....................  
.................... // Dinh nghia ham.  
.................... output_bit(LCD_DATA4, bit_test(n, 0));   // Xuat lan luot cac bit len bus du lieu. 
*
007B:  BTFSC  3E.0
007C:  GOTO   07F
007D:  BCF    08.4
007E:  GOTO   080
007F:  BSF    08.4
0080:  BSF    03.5
0081:  BCF    08.4
.................... output_bit(LCD_DATA5, bit_test(n, 1)); 
0082:  BCF    03.5
0083:  BTFSC  3E.1
0084:  GOTO   087
0085:  BCF    08.5
0086:  GOTO   088
0087:  BSF    08.5
0088:  BSF    03.5
0089:  BCF    08.5
.................... output_bit(LCD_DATA6, bit_test(n, 2)); 
008A:  BCF    03.5
008B:  BTFSC  3E.2
008C:  GOTO   08F
008D:  BCF    08.6
008E:  GOTO   090
008F:  BSF    08.6
0090:  BSF    03.5
0091:  BCF    08.6
.................... output_bit(LCD_DATA7, bit_test(n, 3)); 
0092:  BCF    03.5
0093:  BTFSC  3E.3
0094:  GOTO   097
0095:  BCF    08.7
0096:  GOTO   098
0097:  BSF    08.7
0098:  BSF    03.5
0099:  BCF    08.7
....................      
.................... delay_cycles(1);      // Tao tre 1 chu ky (t=1us voi fosc=4MHz). 
009A:  NOP
.................... lcd_output_enable(1);   // Tao xung ghi thong tin vao C.LCD. 
009B:  BCF    03.5
009C:  BSF    08.2
009D:  BSF    03.5
009E:  BCF    08.2
.................... delay_us(2);         // Tao tre 2 chu ky (t=2us voi fosc=4MHz). 
009F:  GOTO   0A0
.................... lcd_output_enable(0);   // Tao xung ghi thong tin vao LCD - EN = 1->0 (High to Low). 
00A0:  BCF    03.5
00A1:  BCF    08.2
00A2:  BSF    03.5
00A3:  BCF    08.2
.................... } 
00A4:  BCF    03.5
00A5:  RETLW  00
....................  
.................... // *************************************************** 
.................... void lcd_gotoxy(byte x, byte y)   // Ham thiet lap vi tri ghi tren C.LCD (Goc tren ben trai co toa do la 1,1). 
.................... { 
.................... // Khai bao bien. 
.................... byte address; 
.................... // Dinh nghia ham.   
.................... if(y==1)               // Kiem tra vi tri truy xuat thuoc hang 2. 
*
0168:  DECFSZ 38,W
0169:  GOTO   16C
....................    address=lcd_line_one;      // Nap dia chi RAM cua hang 2.  
016A:  CLRF   39
.................... else if(y==2)      // Neu vi tri truy xuat thuoc hang 1. 
016B:  GOTO   180
016C:  MOVF   38,W
016D:  SUBLW  02
016E:  BTFSS  03.2
016F:  GOTO   173
....................    address=lcd_line_two;      // Nap dia chi RAM cua hang 1. 
0170:  MOVLW  40
0171:  MOVWF  39
.................... else if(y==3) 
0172:  GOTO   180
0173:  MOVF   38,W
0174:  SUBLW  03
0175:  BTFSS  03.2
0176:  GOTO   17A
....................    address=lcd_line_three;      
0177:  MOVLW  14
0178:  MOVWF  39
.................... else if(y==4) 
0179:  GOTO   180
017A:  MOVF   38,W
017B:  SUBLW  04
017C:  BTFSS  03.2
017D:  GOTO   180
....................    address=lcd_line_four;    
017E:  MOVLW  54
017F:  MOVWF  39
....................  
.................... address+=x-1;               // Ghep dia chi cot vao dia chi tong quat (address). address = address + (x-1).       
0180:  MOVLW  01
0181:  SUBWF  37,W
0182:  ADDWF  39,F
....................                         // Ta qui uoc: Goc tren ben trai co toa do la 1,1 -> Cot dau tien la Cot 1 
....................                         // (x-1) vi C.LCD qui uoc cot dau tien co dia chi la 0. 
.................... lcd_send_byte(0,0x80|address);   // Goi ham truyen thong tin (lenh) sang C.LCD. 
0183:  MOVF   39,W
0184:  IORLW  80
0185:  MOVWF  3A
0186:  CLRF   3B
0187:  MOVF   3A,W
0188:  MOVWF  3C
0189:  CALL   0D7
.................... }                        // Lenh: Thiet lap dia chi DDRAM cua C.LCD (addresss).    
018A:  RETLW  00
....................  
.................... // *************************************************** 
.................... char lcd_getc(byte x, byte y)   // Ham tra ve ky tu tai vi tri (x,y) tren C.LCD. 
.................... { 
.................... // Khai bao bien. 
.................... char value; 
.................... // Dinh nghia ham.   
.................... lcd_gotoxy(x,y);            // Xac dinh toa do C.LCD can truy xuat. 
.................... while(bit_test(lcd_read_byte(),7));   // Cho Busy Flag = 0 (C.LCD da xu ly xong). 
.................... lcd_output_rs(1);         // RS = 1 - Databus = Bus du lieu. 
.................... value = lcd_read_byte();   // Doc ve tu C.LCD. 
.................... lcd_output_rs(0);         // RS = 0 - Databus = Bus lenh. 
....................  
.................... return(value);      // Tra ve ma ky tu tai toa do yeu cau. 
.................... } 
....................  
.................... // *************************************************** 
.................... void lcd_putc(char c)   // Ham se hien thi ky tu c tai vi tri ke tiep tren C.LCD. 
.................... { 
.................... // Khai bao bien. 
....................  
.................... // Dinh nghia ham.  
.................... switch (c) 
....................    { 
018B:  MOVF   36,W
018C:  XORLW  0C
018D:  BTFSC  03.2
018E:  GOTO   196
018F:  XORLW  06
0190:  BTFSC  03.2
0191:  GOTO   19E
0192:  XORLW  02
0193:  BTFSC  03.2
0194:  GOTO   1A4
0195:  GOTO   1A9
....................    case '\f':     // Chuc nang xoa hien thi. 
....................       lcd_send_byte(0,0x01);   // Goi ham truyen thong tin (lenh) sang C.LCD. 
0196:  CLRF   3B
0197:  MOVLW  01
0198:  MOVWF  3C
0199:  CALL   0D7
....................       delay_ms(2);         // Lenh: Xoa hien thi tren man hinh C.LCD (0x01). 
019A:  MOVLW  02
019B:  MOVWF  37
019C:  CALL   066
....................       break; 
019D:  GOTO   1AF
....................    case '\n':       // Chuc nang bat dau hang thu 2. 
....................       lcd_gotoxy(1,0x02);     // Goi ham truyen thong tin (du lieu) sang C.LCD.    
019E:  MOVLW  01
019F:  MOVWF  37
01A0:  MOVLW  02
01A1:  MOVWF  38
01A2:  CALL   168
....................       break; 
01A3:  GOTO   1AF
....................     case '\b':       // Chuc nang lui ve 1 vi tri. 
....................       lcd_send_byte(0,0x10);    // Goi ham truyen thong tin (lenh) sang C.LCD.  
01A4:  CLRF   3B
01A5:  MOVLW  10
01A6:  MOVWF  3C
01A7:  CALL   0D7
....................       break;               // Lenh: Doi con tro sang trai (0x10). 
01A8:  GOTO   1AF
....................    default:       // Chuc nang hien thi ky tu c tai vi tri ke tiep tren C.LCD. 
....................       lcd_send_byte(1,c);     // Goi ham truyen thong tin (du lieu) sang C.LCD. 
01A9:  MOVLW  01
01AA:  MOVWF  3B
01AB:  MOVF   36,W
01AC:  MOVWF  3C
01AD:  CALL   0D7
....................       break; 
01AE:  GOTO   1AF
....................    } 
.................... }       
01AF:  RETLW  00
.................... // ***************************************************    
....................  
.................... //#include <LCD.C> 
.................... void Button1() 
.................... { 
.................... if(input(PIN_A3)==0) 
*
05F8:  BSF    03.5
05F9:  BSF    05.3
05FA:  BCF    03.5
05FB:  BTFSC  05.3
05FC:  GOTO   603
.................... { 
....................    OUTPUT_B(0x44); 
05FD:  BSF    03.5
05FE:  CLRF   06
05FF:  MOVLW  44
0600:  BCF    03.5
0601:  MOVWF  06
.................... } 
.................... else{ 
0602:  GOTO   607
....................    OUTPUT_B(0x00); 
0603:  BSF    03.5
0604:  CLRF   06
0605:  BCF    03.5
0606:  CLRF   06
.................... } 
.................... } 
0607:  BSF    0A.3
0608:  BCF    0A.4
0609:  GOTO   086 (RETURN)
.................... float temp; 
.................... float fahr; 
.................... void Celius() 
.................... { 
....................   //lcd_putc('\f');// Clear LCD 
....................    lcd_gotoxy(3,1);                              // Go to column 3 row 1 
*
0478:  MOVLW  03
0479:  MOVWF  37
047A:  MOVLW  01
047B:  MOVWF  38
047C:  CALL   168
....................    lcd_putc("Temperature:"); 
047D:  CLRF   29
047E:  MOVF   29,W
047F:  CALL   00C
0480:  IORLW  00
0481:  BTFSC  03.2
0482:  GOTO   487
0483:  INCF   29,F
0484:  MOVWF  36
0485:  CALL   18B
0486:  GOTO   47E
....................    lcd_gotoxy(1,2);      
0487:  MOVLW  01
0488:  MOVWF  37
0489:  MOVLW  02
048A:  MOVWF  38
048B:  CALL   168
....................    printf(lcd_putc,"%f",temp);// Display LM35 temperature result 
048C:  MOVLW  89
048D:  MOVWF  04
048E:  MOVF   23,W
048F:  MOVWF  2C
0490:  MOVF   22,W
0491:  MOVWF  2B
0492:  MOVF   21,W
0493:  MOVWF  2A
0494:  MOVF   20,W
0495:  MOVWF  29
0496:  MOVLW  02
0497:  MOVWF  2D
0498:  CALL   352
....................    lcd_putc(0xdf);                
0499:  MOVLW  DF
049A:  MOVWF  36
049B:  CALL   18B
....................    lcd_putc("C "); 
049C:  CLRF   29
049D:  MOVF   29,W
049E:  CALL   01D
049F:  IORLW  00
04A0:  BTFSC  03.2
04A1:  GOTO   4A6
04A2:  INCF   29,F
04A3:  MOVWF  36
04A4:  CALL   18B
04A5:  GOTO   49D
....................    
....................   if(temp > 130) 
04A6:  CLRF   2C
04A7:  CLRF   2B
04A8:  MOVLW  02
04A9:  MOVWF  2A
04AA:  MOVLW  86
04AB:  MOVWF  29
04AC:  MOVF   23,W
04AD:  MOVWF  30
04AE:  MOVF   22,W
04AF:  MOVWF  2F
04B0:  MOVF   21,W
04B1:  MOVWF  2E
04B2:  MOVF   20,W
04B3:  MOVWF  2D
04B4:  CALL   439
04B5:  BTFSS  03.0
04B6:  GOTO   50F
....................   { 
....................   OUTPUT_B(0xFF); 
04B7:  BSF    03.5
04B8:  CLRF   06
04B9:  MOVLW  FF
04BA:  BCF    03.5
04BB:  MOVWF  06
....................   OUTPUT_HIGH(LOA); 
04BC:  BCF    28.6
04BD:  MOVF   28,W
04BE:  BSF    03.5
04BF:  MOVWF  07
04C0:  BCF    03.5
04C1:  BSF    07.6
....................     lcd_gotoxy(1,2);      
04C2:  MOVLW  01
04C3:  MOVWF  37
04C4:  MOVLW  02
04C5:  MOVWF  38
04C6:  CALL   168
....................     printf(lcd_putc,"%f in Celius",temp); 
04C7:  MOVLW  89
04C8:  MOVWF  04
04C9:  MOVF   23,W
04CA:  MOVWF  2C
04CB:  MOVF   22,W
04CC:  MOVWF  2B
04CD:  MOVF   21,W
04CE:  MOVWF  2A
04CF:  MOVF   20,W
04D0:  MOVWF  29
04D1:  MOVLW  02
04D2:  MOVWF  2D
04D3:  CALL   352
04D4:  MOVLW  02
04D5:  MOVWF  29
04D6:  MOVF   29,W
04D7:  CALL   024
04D8:  INCF   29,F
04D9:  MOVWF  77
04DA:  MOVWF  36
04DB:  CALL   18B
04DC:  MOVLW  0C
04DD:  SUBWF  29,W
04DE:  BTFSS  03.2
04DF:  GOTO   4D6
....................     delay_ms(2000); 
04E0:  MOVLW  08
04E1:  MOVWF  29
04E2:  MOVLW  FA
04E3:  MOVWF  37
04E4:  CALL   066
04E5:  DECFSZ 29,F
04E6:  GOTO   4E2
....................     lcd_putc('\f'); 
04E7:  MOVLW  0C
04E8:  MOVWF  36
04E9:  CALL   18B
....................     lcd_gotoxy(3,1);                              // Go to column 3 row 1 
04EA:  MOVLW  03
04EB:  MOVWF  37
04EC:  MOVLW  01
04ED:  MOVWF  38
04EE:  CALL   168
....................     lcd_putc("Temperature:"); 
04EF:  CLRF   29
04F0:  MOVF   29,W
04F1:  CALL   00C
04F2:  IORLW  00
04F3:  BTFSC  03.2
04F4:  GOTO   4F9
04F5:  INCF   29,F
04F6:  MOVWF  36
04F7:  CALL   18B
04F8:  GOTO   4F0
....................     lcd_gotoxy(5,2);      
04F9:  MOVLW  05
04FA:  MOVWF  37
04FB:  MOVLW  02
04FC:  MOVWF  38
04FD:  CALL   168
....................     lcd_putc("Overload"); 
04FE:  CLRF   29
04FF:  MOVF   29,W
0500:  CALL   035
0501:  IORLW  00
0502:  BTFSC  03.2
0503:  GOTO   508
0504:  INCF   29,F
0505:  MOVWF  36
0506:  CALL   18B
0507:  GOTO   4FF
....................     delay_ms(2000); 
0508:  MOVLW  08
0509:  MOVWF  29
050A:  MOVLW  FA
050B:  MOVWF  37
050C:  CALL   066
050D:  DECFSZ 29,F
050E:  GOTO   50A
....................   } 
....................   if(temp >= 100 && temp <= 130) 
050F:  CLRF   2C
0510:  CLRF   2B
0511:  MOVLW  48
0512:  MOVWF  2A
0513:  MOVLW  85
0514:  MOVWF  29
0515:  MOVF   23,W
0516:  MOVWF  30
0517:  MOVF   22,W
0518:  MOVWF  2F
0519:  MOVF   21,W
051A:  MOVWF  2E
051B:  MOVF   20,W
051C:  MOVWF  2D
051D:  CALL   439
051E:  BTFSC  03.0
051F:  GOTO   522
0520:  BTFSS  03.2
0521:  GOTO   558
0522:  MOVF   23,W
0523:  MOVWF  2C
0524:  MOVF   22,W
0525:  MOVWF  2B
0526:  MOVF   21,W
0527:  MOVWF  2A
0528:  MOVF   20,W
0529:  MOVWF  29
052A:  CLRF   30
052B:  CLRF   2F
052C:  MOVLW  02
052D:  MOVWF  2E
052E:  MOVLW  86
052F:  MOVWF  2D
0530:  CALL   439
0531:  BTFSC  03.0
0532:  GOTO   535
0533:  BTFSS  03.2
0534:  GOTO   558
....................   { 
....................   OUTPUT_B(0xFF); 
0535:  BSF    03.5
0536:  CLRF   06
0537:  MOVLW  FF
0538:  BCF    03.5
0539:  MOVWF  06
....................   OUTPUT_HIGH(LOA); 
053A:  BCF    28.6
053B:  MOVF   28,W
053C:  BSF    03.5
053D:  MOVWF  07
053E:  BCF    03.5
053F:  BSF    07.6
....................   delay_ms(1000); 
0540:  MOVLW  04
0541:  MOVWF  29
0542:  MOVLW  FA
0543:  MOVWF  37
0544:  CALL   066
0545:  DECFSZ 29,F
0546:  GOTO   542
....................   OUTPUT_B(0x00); 
0547:  BSF    03.5
0548:  CLRF   06
0549:  BCF    03.5
054A:  CLRF   06
....................   OUTPUT_LOW(LOA); 
054B:  BCF    28.6
054C:  MOVF   28,W
054D:  BSF    03.5
054E:  MOVWF  07
054F:  BCF    03.5
0550:  BCF    07.6
....................   DELAY_MS(1000); 
0551:  MOVLW  04
0552:  MOVWF  29
0553:  MOVLW  FA
0554:  MOVWF  37
0555:  CALL   066
0556:  DECFSZ 29,F
0557:  GOTO   553
....................   } 
....................   if(temp >50 && temp < 100) 
0558:  CLRF   2C
0559:  CLRF   2B
055A:  MOVLW  48
055B:  MOVWF  2A
055C:  MOVLW  84
055D:  MOVWF  29
055E:  MOVF   23,W
055F:  MOVWF  30
0560:  MOVF   22,W
0561:  MOVWF  2F
0562:  MOVF   21,W
0563:  MOVWF  2E
0564:  MOVF   20,W
0565:  MOVWF  2D
0566:  CALL   439
0567:  BTFSS  03.0
0568:  GOTO   59D
0569:  MOVF   23,W
056A:  MOVWF  2C
056B:  MOVF   22,W
056C:  MOVWF  2B
056D:  MOVF   21,W
056E:  MOVWF  2A
056F:  MOVF   20,W
0570:  MOVWF  29
0571:  CLRF   30
0572:  CLRF   2F
0573:  MOVLW  48
0574:  MOVWF  2E
0575:  MOVLW  85
0576:  MOVWF  2D
0577:  CALL   439
0578:  BTFSS  03.0
0579:  GOTO   59D
....................   { 
....................   OUTPUT_B(0xAA); 
057A:  BSF    03.5
057B:  CLRF   06
057C:  MOVLW  AA
057D:  BCF    03.5
057E:  MOVWF  06
....................   OUTPUT_HIGH(LOA); 
057F:  BCF    28.6
0580:  MOVF   28,W
0581:  BSF    03.5
0582:  MOVWF  07
0583:  BCF    03.5
0584:  BSF    07.6
....................   delay_ms(500); 
0585:  MOVLW  02
0586:  MOVWF  29
0587:  MOVLW  FA
0588:  MOVWF  37
0589:  CALL   066
058A:  DECFSZ 29,F
058B:  GOTO   587
....................   OUTPUT_B(0x00); 
058C:  BSF    03.5
058D:  CLRF   06
058E:  BCF    03.5
058F:  CLRF   06
....................   OUTPUT_LOW(LOA);  
0590:  BCF    28.6
0591:  MOVF   28,W
0592:  BSF    03.5
0593:  MOVWF  07
0594:  BCF    03.5
0595:  BCF    07.6
....................   delay_ms(500); 
0596:  MOVLW  02
0597:  MOVWF  29
0598:  MOVLW  FA
0599:  MOVWF  37
059A:  CALL   066
059B:  DECFSZ 29,F
059C:  GOTO   598
....................   } 
....................    
....................   if(temp > 0 && temp <= 50) 
059D:  CLRF   2C
059E:  CLRF   2B
059F:  CLRF   2A
05A0:  CLRF   29
05A1:  MOVF   23,W
05A2:  MOVWF  30
05A3:  MOVF   22,W
05A4:  MOVWF  2F
05A5:  MOVF   21,W
05A6:  MOVWF  2E
05A7:  MOVF   20,W
05A8:  MOVWF  2D
05A9:  CALL   439
05AA:  BTFSS  03.0
05AB:  GOTO   5DC
05AC:  MOVF   23,W
05AD:  MOVWF  2C
05AE:  MOVF   22,W
05AF:  MOVWF  2B
05B0:  MOVF   21,W
05B1:  MOVWF  2A
05B2:  MOVF   20,W
05B3:  MOVWF  29
05B4:  CLRF   30
05B5:  CLRF   2F
05B6:  MOVLW  48
05B7:  MOVWF  2E
05B8:  MOVLW  84
05B9:  MOVWF  2D
05BA:  CALL   439
05BB:  BTFSC  03.0
05BC:  GOTO   5BF
05BD:  BTFSS  03.2
05BE:  GOTO   5DC
....................   { 
....................    OUTPUT_B(0x55); 
05BF:  BSF    03.5
05C0:  CLRF   06
05C1:  MOVLW  55
05C2:  BCF    03.5
05C3:  MOVWF  06
....................    delay_ms(500); 
05C4:  MOVLW  02
05C5:  MOVWF  29
05C6:  MOVLW  FA
05C7:  MOVWF  37
05C8:  CALL   066
05C9:  DECFSZ 29,F
05CA:  GOTO   5C6
....................    OUTPUT_B(0x00); 
05CB:  BSF    03.5
05CC:  CLRF   06
05CD:  BCF    03.5
05CE:  CLRF   06
....................    delay_ms(500); 
05CF:  MOVLW  02
05D0:  MOVWF  29
05D1:  MOVLW  FA
05D2:  MOVWF  37
05D3:  CALL   066
05D4:  DECFSZ 29,F
05D5:  GOTO   5D1
....................    OUTPUT_LOW(LOA);   
05D6:  BCF    28.6
05D7:  MOVF   28,W
05D8:  BSF    03.5
05D9:  MOVWF  07
05DA:  BCF    03.5
05DB:  BCF    07.6
....................   } 
....................   if(temp <= 0) 
05DC:  MOVF   23,W
05DD:  MOVWF  2C
05DE:  MOVF   22,W
05DF:  MOVWF  2B
05E0:  MOVF   21,W
05E1:  MOVWF  2A
05E2:  MOVF   20,W
05E3:  MOVWF  29
05E4:  CLRF   30
05E5:  CLRF   2F
05E6:  CLRF   2E
05E7:  CLRF   2D
05E8:  CALL   439
05E9:  BTFSC  03.0
05EA:  GOTO   5ED
05EB:  BTFSS  03.2
05EC:  GOTO   5F7
....................   { 
....................   OUTPUT_B(0x00); 
05ED:  BSF    03.5
05EE:  CLRF   06
05EF:  BCF    03.5
05F0:  CLRF   06
....................   OUTPUT_LOW(LOA); 
05F1:  BCF    28.6
05F2:  MOVF   28,W
05F3:  BSF    03.5
05F4:  MOVWF  07
05F5:  BCF    03.5
05F6:  BCF    07.6
....................   } 
.................... } 
05F7:  RETLW  00
.................... void Fahrenheit() 
.................... { 
....................    fahr= (temp*1.8)+32; 
*
060A:  MOVF   23,W
060B:  MOVWF  39
060C:  MOVF   22,W
060D:  MOVWF  38
060E:  MOVF   21,W
060F:  MOVWF  37
0610:  MOVF   20,W
0611:  MOVWF  36
0612:  MOVLW  66
0613:  MOVWF  3D
0614:  MOVWF  3C
0615:  MOVWF  3B
0616:  MOVLW  7F
0617:  MOVWF  3A
0618:  CALL   29B
0619:  MOVF   77,W
061A:  MOVWF  29
061B:  MOVF   78,W
061C:  MOVWF  2A
061D:  MOVF   79,W
061E:  MOVWF  2B
061F:  MOVF   7A,W
0620:  MOVWF  2C
0621:  BCF    03.1
0622:  MOVF   2C,W
0623:  MOVWF  30
0624:  MOVF   2B,W
0625:  MOVWF  2F
0626:  MOVF   2A,W
0627:  MOVWF  2E
0628:  MOVF   29,W
0629:  MOVWF  2D
062A:  CLRF   34
062B:  CLRF   33
062C:  CLRF   32
062D:  MOVLW  84
062E:  MOVWF  31
*
076F:  MOVF   7A,W
0770:  MOVWF  27
0771:  MOVF   79,W
0772:  MOVWF  26
0773:  MOVF   78,W
0774:  MOVWF  25
0775:  MOVF   77,W
0776:  MOVWF  24
....................   // lcd_putc('\f');                                // Clear LCD 
....................    lcd_gotoxy(3,1);                              // Go to column 3 row 1 
0777:  MOVLW  03
0778:  MOVWF  37
0779:  MOVLW  01
077A:  MOVWF  38
077B:  CALL   168
....................    lcd_putc("Fahrenheit"); 
077C:  CLRF   29
077D:  MOVF   29,W
077E:  CALL   042
077F:  IORLW  00
0780:  BTFSC  03.2
0781:  GOTO   786
0782:  INCF   29,F
0783:  MOVWF  36
0784:  CALL   18B
0785:  GOTO   77D
....................    lcd_gotoxy(1,2); 
0786:  MOVLW  01
0787:  MOVWF  37
0788:  MOVLW  02
0789:  MOVWF  38
078A:  CALL   168
....................    printf(lcd_putc,"%f in Fahrenheit",fahr);               // Display LM35 temperature result 
078B:  MOVLW  89
078C:  MOVWF  04
078D:  MOVF   27,W
078E:  MOVWF  2C
078F:  MOVF   26,W
0790:  MOVWF  2B
0791:  MOVF   25,W
0792:  MOVWF  2A
0793:  MOVF   24,W
0794:  MOVWF  29
0795:  MOVLW  02
0796:  MOVWF  2D
0797:  CALL   352
0798:  MOVLW  02
0799:  MOVWF  29
079A:  MOVF   29,W
079B:  CALL   051
079C:  INCF   29,F
079D:  MOVWF  77
079E:  MOVWF  36
079F:  CALL   18B
07A0:  MOVLW  10
07A1:  SUBWF  29,W
07A2:  BTFSS  03.2
07A3:  GOTO   79A
....................   if(fahr > 50) 
07A4:  CLRF   2C
07A5:  CLRF   2B
07A6:  MOVLW  48
07A7:  MOVWF  2A
07A8:  MOVLW  84
07A9:  MOVWF  29
07AA:  MOVF   27,W
07AB:  MOVWF  30
07AC:  MOVF   26,W
07AD:  MOVWF  2F
07AE:  MOVF   25,W
07AF:  MOVWF  2E
07B0:  MOVF   24,W
07B1:  MOVWF  2D
07B2:  CALL   439
07B3:  BTFSS  03.0
07B4:  GOTO   7D3
....................   { 
....................   while(input(pin_a4)==0){ 
07B5:  BSF    03.5
07B6:  BSF    05.4
07B7:  BCF    03.5
07B8:  BTFSC  05.4
07B9:  GOTO   7D2
....................   OUTPUT_B(0xCC); 
07BA:  BSF    03.5
07BB:  CLRF   06
07BC:  MOVLW  CC
07BD:  BCF    03.5
07BE:  MOVWF  06
....................   delay_ms(1000); 
07BF:  MOVLW  04
07C0:  MOVWF  29
07C1:  MOVLW  FA
07C2:  MOVWF  37
07C3:  CALL   066
07C4:  DECFSZ 29,F
07C5:  GOTO   7C1
....................   OUTPUT_B(0x00); 
07C6:  BSF    03.5
07C7:  CLRF   06
07C8:  BCF    03.5
07C9:  CLRF   06
....................   delay_ms(1000); 
07CA:  MOVLW  04
07CB:  MOVWF  29
07CC:  MOVLW  FA
07CD:  MOVWF  37
07CE:  CALL   066
07CF:  DECFSZ 29,F
07D0:  GOTO   7CC
....................   } 
07D1:  GOTO   7B5
....................   } 
....................   else 
07D2:  GOTO   7D7
....................   { 
....................   OUTPUT_B(0x00); 
07D3:  BSF    03.5
07D4:  CLRF   06
07D5:  BCF    03.5
07D6:  CLRF   06
....................   } 
.................... } 
07D7:  BSF    0A.3
07D8:  BCF    0A.4
07D9:  GOTO   093 (RETURN)
.................... void BUTTON_3() 
.................... { 
.................... while(input(pin_a5)==0){} 
07DA:  BSF    03.5
07DB:  BSF    05.5
07DC:  BCF    03.5
07DD:  BTFSS  05.5
07DE:  GOTO   7DA
.................... OUTPUT_B(0XFF); 
07DF:  BSF    03.5
07E0:  CLRF   06
07E1:  MOVLW  FF
07E2:  BCF    03.5
07E3:  MOVWF  06
.................... delay_ms(500); 
07E4:  MOVLW  02
07E5:  MOVWF  29
07E6:  MOVLW  FA
07E7:  MOVWF  37
07E8:  CALL   066
07E9:  DECFSZ 29,F
07EA:  GOTO   7E6
....................  
.................... while(input(pin_a5)==1){} 
07EB:  BSF    03.5
07EC:  BSF    05.5
07ED:  BCF    03.5
07EE:  BTFSC  05.5
07EF:  GOTO   7EB
.................... OUTPUT_B(0X00); 
07F0:  BSF    03.5
07F1:  CLRF   06
07F2:  BCF    03.5
07F3:  CLRF   06
.................... delay_ms(500); 
07F4:  MOVLW  02
07F5:  MOVWF  29
07F6:  MOVLW  FA
07F7:  MOVWF  37
07F8:  CALL   066
07F9:  DECFSZ 29,F
07FA:  GOTO   7F6
.................... } 
07FB:  BSF    0A.3
07FC:  BCF    0A.4
07FD:  GOTO   0A9 (RETURN)
.................... void main(){ 
*
0800:  CLRF   04
0801:  BCF    03.7
0802:  MOVLW  1F
0803:  ANDWF  03,F
0804:  MOVLW  71
0805:  BSF    03.5
0806:  MOVWF  0F
0807:  MOVF   0F,W
0808:  BSF    03.6
0809:  MOVF   09,W
080A:  ANDLW  C0
080B:  MOVWF  09
080C:  BCF    03.6
080D:  BCF    1F.4
080E:  BCF    1F.5
080F:  MOVLW  00
0810:  BSF    03.6
0811:  MOVWF  08
0812:  BCF    03.5
0813:  CLRF   07
0814:  CLRF   08
0815:  CLRF   09
....................   set_tris_a(0x11); 
*
0819:  MOVLW  11
081A:  BSF    03.5
081B:  MOVWF  05
....................   set_tris_b(0x00); 
081C:  MOVLW  00
081D:  MOVWF  06
....................   set_tris_c(0x00); 
081E:  MOVWF  07
081F:  BCF    03.5
0820:  MOVWF  28
....................   setup_oscillator(OSC_8MHZ);                    // Set the internal oscillator to 8MHz 
0821:  MOVLW  71
0822:  BSF    03.5
0823:  MOVWF  0F
0824:  MOVF   0F,W
....................   setup_adc(ADC_CLOCK_INTERNAL);                 // ADC Module uses its internal oscillator 
0825:  BCF    03.5
0826:  BSF    1F.6
0827:  BSF    1F.7
0828:  BSF    03.5
0829:  BSF    1F.7
082A:  BCF    03.5
082B:  BSF    1F.0
....................   setup_adc_ports(sAN0);                         // Configure AN0 pin as analog 
082C:  BSF    03.5
082D:  BSF    03.6
082E:  MOVF   09,W
082F:  ANDLW  C0
0830:  MOVWF  09
0831:  BCF    03.6
0832:  BCF    1F.4
0833:  BCF    1F.5
0834:  MOVLW  01
0835:  BSF    03.6
0836:  MOVWF  08
....................   set_adc_channel(0);                            // Select channel 0 (AN0) 
0837:  MOVLW  00
0838:  MOVWF  78
0839:  BCF    03.5
083A:  BCF    03.6
083B:  MOVF   1F,W
083C:  ANDLW  C3
083D:  IORWF  78,W
083E:  MOVWF  1F
....................   lcd_init();  
083F:  BCF    0A.3
0840:  GOTO   12E
0841:  BSF    0A.3
....................   lcd_putc('\f');  
0842:  MOVLW  0C
0843:  MOVWF  36
0844:  BCF    0A.3
0845:  CALL   18B
0846:  BSF    0A.3
....................   // Initialize LCD module 
....................   output_b(0x00); 
0847:  BSF    03.5
0848:  CLRF   06
0849:  BCF    03.5
084A:  CLRF   06
....................    
....................   while(TRUE){ 
....................     
....................    temp = read_adc() / 2.048;// Read analog voltage and convert it to degree Celsius (0.489 = 500/1023) 
084B:  BSF    1F.1
084C:  BTFSC  1F.1
084D:  GOTO   04C
084E:  MOVF   1E,W
084F:  MOVWF  7A
0850:  BSF    03.5
0851:  MOVF   1E,W
0852:  BCF    03.5
0853:  MOVWF  29
0854:  MOVF   1E,W
0855:  MOVWF  2A
0856:  MOVWF  2C
0857:  MOVF   29,W
0858:  MOVWF  2B
0859:  BCF    0A.3
085A:  GOTO   1B0
085B:  BSF    0A.3
085C:  MOVF   7A,W
085D:  MOVWF  2E
085E:  MOVF   79,W
085F:  MOVWF  2D
0860:  MOVF   78,W
0861:  MOVWF  2C
0862:  MOVF   77,W
0863:  MOVWF  2B
0864:  MOVLW  6F
0865:  MOVWF  32
0866:  MOVLW  12
0867:  MOVWF  31
0868:  MOVLW  03
0869:  MOVWF  30
086A:  MOVLW  80
086B:  MOVWF  2F
086C:  BCF    0A.3
086D:  GOTO   1CF
086E:  BSF    0A.3
086F:  MOVF   7A,W
0870:  MOVWF  23
0871:  MOVF   79,W
0872:  MOVWF  22
0873:  MOVF   78,W
0874:  MOVWF  21
0875:  MOVF   77,W
0876:  MOVWF  20
....................     
....................    Celius(); 
0877:  BCF    0A.3
0878:  CALL   478
0879:  BSF    0A.3
....................  
....................    delay_ms(20); 
087A:  MOVLW  14
087B:  MOVWF  37
087C:  BCF    0A.3
087D:  CALL   066
087E:  BSF    0A.3
....................  
....................    if(INPUT(PIN_A3)==0){ 
087F:  BSF    03.5
0880:  BSF    05.3
0881:  BCF    03.5
0882:  BTFSC  05.3
0883:  GOTO   087
....................     Button1(); 
0884:  BCF    0A.3
0885:  GOTO   5F8
0886:  BSF    0A.3
....................     } 
....................    while(input(pin_a4)==0) 
....................    { 
0887:  BSF    03.5
0888:  BSF    05.4
0889:  BCF    03.5
088A:  BTFSC  05.4
088B:  GOTO   0A2
....................    if(input(pin_a4)==0) 
088C:  BSF    03.5
088D:  BSF    05.4
088E:  BCF    03.5
088F:  BTFSC  05.4
0890:  GOTO   094
....................    Fahrenheit(); 
0891:  BCF    0A.3
0892:  GOTO   60A
0893:  BSF    0A.3
....................    if(input(pin_a4)==1) 
0894:  BSF    03.5
0895:  BSF    05.4
0896:  BCF    03.5
0897:  BTFSS  05.4
0898:  GOTO   09E
....................    lcd_putc('\f');  
0899:  MOVLW  0C
089A:  MOVWF  36
089B:  BCF    0A.3
089C:  CALL   18B
089D:  BSF    0A.3
....................    Celius(); 
089E:  BCF    0A.3
089F:  CALL   478
08A0:  BSF    0A.3
....................    } 
08A1:  GOTO   087
....................     if(INPUT(PIN_A5)==0){ 
08A2:  BSF    03.5
08A3:  BSF    05.5
08A4:  BCF    03.5
08A5:  BTFSC  05.5
08A6:  GOTO   0AA
....................     BUTTON_3(); 
08A7:  BCF    0A.3
08A8:  GOTO   7DA
08A9:  BSF    0A.3
....................     } 
....................   } 
08AA:  GOTO   04B
.................... } 
....................     
....................  
08AB:  SLEEP

Configuration Fuses:
   Word  1: 2CC4   INTRC_IO NOWDT PUT NOMCLR NOPROTECT NOCPD NOBROWNOUT IESO FCMEN NOLVP NODEBUG
   Word  2: 3FFF   NOWRT BORV40
